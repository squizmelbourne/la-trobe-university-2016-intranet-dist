/*global jQuery*/
/**
 * la-trobe-university-intranet
 * Global JS
 *
 * version: 0.1.0
 * file:    global.min.js
 * author:  Squiz Australia
 * change log:
 *     Tue Mar 28 2017 10:50:34 GMT+1100 (AEDT) - First revision
 */

/*
 * Table of Contents
 *
 * - Global
 * - Modules

 */
'use strict';
/*
--------------------
Global
--------------------
*/
//  Declare JS Enabled.

var _slicedToArray = function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; }();

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

$('body').removeClass('no-js').addClass('js-enabled');

/*
--------------------
Modules
--------------------
*/

(function ($) {
    // First example is a standard accordion
    /*eslint new-cap: 0*/
    $('.accordion').UberAccordion({
        buttonClass: 'accordion__link',
        autoExpand: '#accordion__target-1',
        toggle: true,
        multiple: true,
        expandOnFocus: false,
        preventDefaultButton: true,
        hashChange: true
    });

    // Second example is a tab-like setup
    $('.tabs').UberAccordion({
        buttonClass: 'tabs__link',

        autoExpand: function autoExpand() {
            return window.location.hash || '#tabs__target-1';
        },

        toggle: false,
        multiple: false,
        preventDefaultButton: true
    });
})(jQuery);

(function ($) {
    var getContainerForInput = function getContainerForInput(elem) {
        var $container = $(elem).parents('.sq-form-question');
        return $container;
    };

    var options = {
        errorClass: 'sq-form-error',
        errorPlacement: function errorPlacement(error, element) {
            var $container = $(element).parents('.sq-form-question-answer');
            if ($(element).attr('id') === 'recaptcha_response_field') {
                error.insertAfter(element);
            } else {
                $container.append(error);
            }
        },

        // fn((element, errorClass, validClass))
        highlight: function highlight(element) {
            getContainerForInput(element).addClass('sq-form-question-error');
        },

        // fn element, errorClass, validClass)
        unhighlight: function unhighlight(element) {
            getContainerForInput(element).removeClass('sq-form-question-error');
        }
    };

    $('.sq-form').validate(options);
})(jQuery);

/*eslint no-console: 0, new-cap: 0*/
(function ($) {
    // Match this with the breakpoint at which the screen transforms
    // from smaller size to medium size
    var minMq = '(min-width: 85em)';
    var $body = $('body');
    var $nav = $('#navbar__dropdown');

    // Load the menu
    function loadMenu() {

        var isCurrent = $nav.find('.navbar__item--current .sub-nav').length !== 0;
        $nav.NavBar({
            onState: function onState($item, active) {
                if (isCurrent) {
                    return;
                }
                if ($item.find('.sub-nav').length && active) {
                    $body.addClass('is-nav-active');
                } else {
                    $body.removeClass('is-nav-active');
                }
            }
        });

        if (isCurrent) {
            $body.addClass('is-nav-active');
        }
    }

    // Mobile button toggler
    $('.nav-main').UberAccordion({
        buttonClass: 'navbar__toggle'
    });

    var el = document.querySelector('.nav-main');
    if (el) {

        // Bind menu load when transitioning media query breakpoints
        window.matchMedia(minMq).addListener(function (mql) {
            // Emoty console statement needed to ensure FF always runs this
            if (mql.matches) {
                loadMenu();
                el.classList.remove('nav-main--mobile');
                el.classList.add('nav-main--desktop');
            } else {
                $nav.NavBar('clearState');
                el.classList.add('nav-main--mobile');
                el.classList.remove('nav-main--desktop');
            }
        });

        if (window.matchMedia(minMq).matches) {
            loadMenu();
        } else {
            el.classList.add('nav-main--mobile');
            el.classList.remove('nav-main--desktop');
        }
    }
})(jQuery);

(function ($) {
    var $searchInput = $('#quick-search__query');
    // Mimick placeholder support where it is not available.
    // Credit: http://webdesignerwall.com/tutorials/cross-browser-html5-placeholder-text
    if (!Modernizr.input.placeholder && $searchInput.attr('placeholder') !== '') {
        $searchInput.focus(function () {
            var input = $(this);
            if (input.val() === input.attr('placeholder')) {
                input.val('');
                input.removeClass('placeholder');
            }
        }).blur(function () {
            var input = $(this);
            if (input.val() === '' || input.val() === input.attr('placeholder')) {
                input.addClass('placeholder');
                input.val(input.attr('placeholder'));
            }
        }).blur();
        $searchInput.parents('form').submit(function () {
            $(this).find('[placeholder]').each(function () {
                var input = $(this);
                if (input.val() === input.attr('placeholder')) {
                    input.val('');
                }
            });
        });
    } //end if
})(jQuery);

var setEqualHeight = {
    init: function init(carousel) {
        setEqualHeight.adjustHeight(carousel);
    },
    adjustHeight: function adjustHeight(carousel) {
        var slickEl = carousel.currentTarget;
        if (slickEl.classList.contains('js-carousel-equalheight')) {
            (function () {
                var slidesArr = Array.from(slickEl.querySelectorAll('.carousel__slide'));
                var highest = slidesArr.map(function (el) {
                    return el.offsetHeight;
                }).reduce(function (acc, el) {
                    return acc > el ? acc : el;
                }, 0);

                slidesArr.forEach(function (el) {
                    el.style.height = highest + 'px';
                });
            })();
        }
    },
    reset: function reset(ArrEls) {
        ArrEls.forEach(function (el) {
            el.style.height = '';
        });
    }
};

(function ($) {
    var carousel = document.querySelector('.js-carousel');
    if (carousel !== null) {
        var caNext = carousel.getAttribute('data-arrow-next');
        var caPrevious = carousel.getAttribute('data-arrow-previous');
        var $slideshow = $('.js-carousel');
        var buttonTemplateNext = ['<button type="button" class="slick-next">', '<svg class="icon slick-arrow__icon">', '<use xlink:href="' + caNext + '"></use>', '</svg>', 'Next Slide', '</button>'].join('');
        var buttonTemplatePrevious = ['<button type="button" class="slick-prev">', '<svg class="icon slick-arrow__icon">', '<use xlink:href="' + caPrevious + '"></use>', '</svg>', 'Previous Slide', '</button>'].join('');

        $slideshow.on('init', function (slick) {
            // Set equal height for slides on load
            setEqualHeight.init(slick);
            // Set equal height for slides if the viewport changes between desktop-mobile and vice-versa
            var minMq = '(min-width: 85em)';
            window.matchMedia(minMq).addListener(function () {
                var slides = Array.from(document.querySelector('.js-carousel-equalheight').querySelectorAll('.carousel__slide'));
                setEqualHeight.reset(slides);
                setEqualHeight.init(slick);
            });
        });

        $slideshow.slick({
            dots: true,
            customPaging: function customPaging() {
                return '<span class="dots"></span>';
            },
            arrows: true,
            fade: true,
            speed: 400,
            slide: '.carousel__slide',
            slidesToScroll: 1,
            slidesToShow: 1,
            nextArrow: buttonTemplateNext,
            prevArrow: buttonTemplatePrevious
        });
    }
})(jQuery);

(function ($) {
    'use strict';

    var newsCategories = document.querySelector('meta[name="News.Categories"]'),
        projectCategories = document.querySelector('meta[name="Project.Categories"]'),
        contentFooter = document.querySelector('.content-footer'),
        contentFooterTags = document.querySelector('.content-footer .nav-tags-group'),
        categoryTags = document.getElementById('category-nav-tags') ? document.getElementById('category-nav-tags') : '',
        categoryTagsHTML = '';

    /*
        Identifies if the page is News or Project and gets the propery query string parameter
        for the FB collection based on a hidden input placed in the global variables
    */
    function getQueryStringParam(arrNews, arrProjs) {
        var qsp = '';
        if (arrNews.length) {
            qsp = document.getElementById('news-categories-qstring') ? document.getElementById('news-categories-qstring').value : '';
        } else if (arrProjs.length) {
            qsp = document.getElementById('projects-categories-qstring') ? document.getElementById('projects-categories-qstring').value : '';
        }
        return qsp;
    }

    /* Parse all categories in HTML head metadata, then render as HTML in content footer.
     */
    function renderCategoryTags(tags, arrNews, arrProjs) {
        var richTags = [],
            renderedTags = '',
            siteSearchURL = document.getElementById('site-search-url') ? document.getElementById('site-search-url').value : '';
        if (!tags.length) {
            return renderedTags;
        }
        tags.forEach(function (tag) {
            var tagHTML = ['<a href="', siteSearchURL, '?query=!nullquery', '&', getQueryStringParam(arrNews, arrProjs) + '=' + encodeURIComponent(tag.toLowerCase()), '" class="nav-tag__link btn button--tag">', tag, '</a>'].join('');
            richTags.push(tagHTML);
        });
        renderedTags = richTags.join('\n');
        return renderedTags;
    }

    function categoriesExist(tags) {
        return tags.length;
    }

    newsCategories = newsCategories ? newsCategories.getAttribute('content') : '';
    newsCategories = newsCategories ? newsCategories.split('; ') : [];

    projectCategories = projectCategories ? projectCategories.getAttribute('content') : '';
    projectCategories = projectCategories ? projectCategories.split('; ') : [];

    /* Content footer exists but tag container does not, so create
     * the tag container.
     */
    if (contentFooter && !contentFooterTags) {
        contentFooterTags = document.createElement('ul');
        contentFooterTags.classList.add('nav-tags-group');
        $(contentFooter).append($(contentFooterTags));
    }

    // Category tag group does not exist.
    var spreadedCats = [].concat(_toConsumableArray(newsCategories), _toConsumableArray(projectCategories));
    if (!categoryTags && categoriesExist(spreadedCats)) {
        categoryTagsHTML = '<li id="category-nav-tags" class="nav-tags">' + '<span class="nav-tags__heading">Categories</span>' + '<ul class="nav-tags__list">' + '<li class="nav-tag">' + renderCategoryTags(spreadedCats, newsCategories, projectCategories) + '</li>' + '</ul>' + '</li>';
        categoryTags = $(categoryTagsHTML).prependTo($(contentFooterTags));
        categoryTags = categoryTags[0];
    }
})(jQuery);

/*global Squiz_Matrix_API*/

(function ($) {
    // eslint-disable-line max-statements, complexity
    'use strict';

    var userID = document.getElementById('user-id') ? document.getElementById('user-id').value : '1234';
    var maxItems = document.querySelector('[data-max-items]') ? parseInt(document.querySelector('[data-max-items]').getAttribute('data-max-items'), 10) : 5;
    var apiOptions = {};
    var jsAPI = void 0;
    var userMetadata = [];

    // Init JS API for editing user attributes and metadata fields
    apiOptions['key'] = '3187352393'; // eslint-disable-line dot-notation
    jsAPI = new Squiz_Matrix_API(apiOptions); // eslint-disable-line camelcase

    // Polyfill for Object.values and Object.entries
    {
        Object.values = function (x) {
            return Object.keys(x).reduce(function (y, z) {
                return y.push(x[z]) && y;
            }, []);
        };

        Object.entries = function (x) {
            return Object.keys(x).reduce(function (y, z) {
                return y.push([z, x[z]]) && y;
            }, []);
        };
    }

    function setLoadingState(targetDOMel, toggleClass, loadingFlag) {
        if (loadingFlag) {
            targetDOMel.classList.toggle(toggleClass);
        }
    }
    /**
     * Parse Metadata.
     *
     * @param Object    metaObj     An object with metadata info
     * @param String    filter      the string to filter the object properties
     *
     * @return An array with the filtered object property values
     */
    function parseMetadata(metaObj, filter) {
        var filteredMeta = '';
        var _iteratorNormalCompletion = true;
        var _didIteratorError = false;
        var _iteratorError = undefined;

        try {
            for (var _iterator = Object.entries(metaObj)[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                var _step$value = _slicedToArray(_step.value, 2),
                    key = _step$value[0],
                    value = _step$value[1];

                if (key === filter) {
                    filteredMeta = value === '[]' ? [] : value;
                }
            }
        } catch (err) {
            _didIteratorError = true;
            _iteratorError = err;
        } finally {
            try {
                if (!_iteratorNormalCompletion && _iterator.return) {
                    _iterator.return();
                }
            } finally {
                if (_didIteratorError) {
                    throw _iteratorError;
                }
            }
        }

        if ((typeof filteredMeta === 'undefined' ? 'undefined' : _typeof(filteredMeta)) === 'object') {
            return filteredMeta;
        }
        return filteredMeta.replace(/\[|\]/g, '').split(',');
    }
    /**
     * fetchMetadata
     * Fetches the user metadata from the Matrix JS API
     *
     * @param Integer   userid          the user id to get the metadata from
     * @param String    metadataName    the metadata field name to look for
     *
     * @return A promise to retrieve the desired metadata
     */
    function fetchMetadata(userid, metadataName) {
        var recacheUrl = document.querySelector('.js-edit-profile-ldap-helper').getAttribute('data-recache-proxy');
        return new jQuery.Deferred(function (promise) {
            jsAPI.getMetadata({
                'asset_id': userid,
                'dataCallback': function dataCallback(obj) {
                    if (obj.errorCode && (obj.errorCode === 'permissionError' || obj.errorCode === 'authError')) {
                        // Fallback for LDAP users which are not allowed to get their own metadata through the API
                        //console.log('fires');
                        $.get(recacheUrl, function (data) {
                            var jsonObj = JSON.parse(data);

                            promise.resolve(jsonObj[metadataName].replace(/[\[\]']+/g, '').split(','));
                        });
                    } else {
                        promise.resolve(parseMetadata(obj, metadataName));
                    }
                }
            });
        });
    }

    /**
    * Removes all the falsey values from an array
    */
    function bouncer(arr) {
        return arr.filter(function (v) {
            return !!v;
        });
    }

    function makeAJAXCall(methodType, url, callback) {
        var xhr = new XMLHttpRequest();
        xhr.open(methodType, url, true);
        xhr.onreadystatechange = function () {
            if (xhr.readyState === 4 && xhr.state === 200) {
                if (callback) {
                    callback(xhr.response);
                }
            }
        };

        xhr.send();
    }

    // Fallback for LDAP users which are not allowed to set their own metadata through the API
    function setMetadataNoApi(userId, currentFieldID, userMeta, targetDOMel, loadingFlag) {
        var loadingClass = targetDOMel.getAttribute('data-loading-class');
        var ldapHelper = document.querySelector('.js-edit-profile-ldap-helper');
        var ajaxProxyUrl = ldapHelper.getAttribute('data-ajax-proxy');
        var recacheUrl = ldapHelper.getAttribute('data-recache-proxy');
        var varnishRecacheUrl = ldapHelper.getAttribute('data-varnish-recache');

        makeAJAXCall('GET', ajaxProxyUrl + '?uid=' + userId + '&fid=' + currentFieldID + '&fval=' + userMeta, setTimeout(function () {
            if (recacheUrl) {
                makeAJAXCall('GET', recacheUrl, setLoadingState(targetDOMel, loadingClass, loadingFlag));
            }
            // Hit the Varnish clear cache url
            if (varnishRecacheUrl) {
                makeAJAXCall('GET', varnishRecacheUrl);
            }
        }, 2000));
    }

    /**
     * setMetadata
     * Sets the user metadata through the Matrix JS API
     *
     * @param Integer   assetID     The user asset id
     * @param Integer   fieldID     The metadata field id to set
     * @param String    fieldVal    An arrayish string for the field value
     *
     */
    function setMetadata(assetID, fieldID, fieldVal, targetDOMel, loadingFlag) {
        var loadingClass = targetDOMel.getAttribute('data-loading-class');
        // Set loading state
        setLoadingState(targetDOMel, loadingClass, loadingFlag);
        //console.log('Debug - Setting metadata to: ' + fieldVal); // debug
        jsAPI.setMetadata({
            'asset_id': assetID,
            'field_id': fieldID,
            'field_val': fieldVal,
            'dataCallback': function dataCallback(obj) {
                if (obj.errorCode && (obj.errorCode === 'permissionError' || obj.errorCode === 'authError')) {
                    // Fallback for LDAP users which are not allowed to set their own metadata through the API
                    setMetadataNoApi(assetID, fieldID, fieldVal, targetDOMel, loadingFlag);
                } else {
                    setLoadingState(targetDOMel, loadingClass, loadingFlag);
                }
            }
        });
    }

    /**
     * removeFromArr
     * Removed an integer from an array of stringged integers
     *
     * @param Array     arr   The array from where the element will be removed
     * @param Integer   el    The element to remove from the Array
     *
     * @return The filtered array
     */
    function removeFromArr(arr, el) {
        return arr.filter(function (element) {
            return parseInt(element, 10) !== el;
        });
    }
    /**
     * existsInMD
     * Check if an ID exists in a Metadata array of stringged IDs
     *
     * @param Array     arr   The array to look for
     * @param Integer   el    The element to find in the Array
     *
     * @return boolean
     */
    function existsInMD(arr, el) {
        if (arr.find(function (arrEl) {
            return parseInt(arrEl, 10) === el;
        })) {
            return true;
        }
        return false;
    }
    /**
     * addToArray
     * Add an element to an array
     *
     * @param Array             arr   The array to where the element will be added
     * @param Integer/String    el    The element to be added to the Array
     *
     * @return The spreaded array
     */
    function addToArray(arr, el) {
        if (existsInMD(arr, el)) {
            return arr;
        }
        return [].concat(_toConsumableArray(arr), [el]);
    }
    /**
     * elLimitReached
     * Checks if an array has reached a predefined limit of elements
     *
     * @param Array     arr         The array containing the elements
     * @param Integer   limitVal    The number to be checked against the array length
     *
     * @return boolean
     */
    function elLimitReached(arr, limitVal) {
        if (arr.length === limitVal) {
            return true;
        }
        return false;
    }

    function toggleUserMenuLink(ev) {
        var $currentButton = $(ev.currentTarget);
        var currentFieldID = $currentButton.data('field-id');
        var menuLinkID = $currentButton.data('field-value');
        var loadingFlag = true;

        ev.preventDefault();

        // determine whether the favourite is to be added or removed.
        if (existsInMD(userMetadata, menuLinkID)) {
            // remove from metadata array
            userMetadata = removeFromArr(userMetadata, menuLinkID);
        } else {
            // check if the array has reached its limit
            if (!elLimitReached(userMetadata, maxItems)) {
                // add to metadata array
                userMetadata = addToArray(userMetadata, menuLinkID);
            } else {
                loadingFlag = false;
            }
        }

        // set the updated metadata
        if (loadingFlag) {
            setMetadata(userID, currentFieldID, '[' + bouncer(userMetadata).toString() + ']', ev.currentTarget, loadingFlag);
        }
    }

    function setActiveStates(btnsArr, mdArr, activeClass) {
        // console.log(btnsArr, mdArr, activeClass); //debug

        // If the user has favourites AND if favourites exceeded AND if page is not in user's favourites
        if (mdArr.length > 0 && mdArr.length >= $('.byline__item--link-favourite').data('max-items') && $.inArray($('.byline__item--link-favourite').data('field-value').toString(), mdArr) < 0) {
            // Hide the favourites toggle
            $('.byline__item--link').addClass('no-favs');
        }

        btnsArr.forEach(function (btn) {
            if (existsInMD(mdArr, $(btn).data('field-value'))) {
                btn.classList.add(activeClass);
                btn.setAttribute('aria-pressed', 'true');

                // if favourite selected, then change text to 'My Favourite'
                var bylineFavouriteText = btn.getElementsByClassName('js-fav-toggle-text');
                if (bylineFavouriteText.length) {
                    bylineFavouriteText[0].innerHTML = 'My Favourite';
                }
            }
        });
    }

    function initUserMetaHandler() {
        var toggleButtons = document.querySelectorAll('.js-toggle-favourite');
        var toggleButtonsArr = Array.from(toggleButtons);
        var metaName = document.querySelector('[data-meta-name]') ? document.querySelector('[data-meta-name]').getAttribute('data-meta-name') : 'none';
        var btnActiveClass = document.querySelector('[data-active-class]') ? document.querySelector('[data-active-class]').getAttribute('data-active-class') : 'button--toggle-favourite-active';

        // Initing user handler
        if (toggleButtons.length) {
            fetchMetadata(userID, metaName).then(function (md) {
                userMetadata = md;
                // Set the buttons active states based on the user metadata
                setActiveStates(toggleButtonsArr, userMetadata, btnActiveClass);
                // Toggle favourite links on user menu
                toggleButtonsArr.forEach.call(toggleButtons, function (toggleButton) {
                    toggleButton.addEventListener('click', toggleUserMenuLink, false);
                });
            });
        }
    }

    function initFavBtnsAnimations() {
        var groupButton = {
            settings: {
                favButtonName: 'js-toggle-favourite',
                activeClasses: document.querySelector('[data-active-class]') ? document.querySelector('[data-active-class]').getAttribute('data-active-class') : 'button--toggle-favourite-active',
                errorClassName: 'button--toggle-favourite-error',
                maxSelect: document.querySelector('[data-max-items]') ? parseInt(document.querySelector('[data-max-items]').getAttribute('data-max-items'), 10) : 5,
                warningIconURL: document.querySelector('[data-btn-warning-url]') ? document.querySelector('[data-btn-warning-url]').getAttribute('data-btn-warning-url') : ''
            },
            init: function init() {
                var _this = groupButton;

                Array.from(document.querySelectorAll('.' + _this.settings.favButtonName)).forEach(function (el) {
                    _this.eventListener(el);
                });
            },
            eventListener: function eventListener(actualEl) {
                var _this = groupButton;

                actualEl.addEventListener('click', function (ev) {
                    ev.preventDefault();
                    var clickedEl = ev.currentTarget;

                    if (clickedEl.classList.contains(_this.settings.favButtonName)) {
                        // Toggle the active class
                        clickedEl.classList.toggle(_this.settings.activeClasses);

                        // Toggle the text, for the byline Fav star in the inside pages
                        var toggleTextEl = clickedEl.querySelector('.js-fav-toggle-text');

                        if (toggleTextEl) {
                            var mappingObj = JSON.parse(toggleTextEl.getAttribute('data-text-match'));
                            var currentText = toggleTextEl.innerHTML;
                            toggleTextEl.innerHTML = currentText === mappingObj.name ? mappingObj.match : mappingObj.name;
                        }

                        // Did it already exceeded the maximum number of items allowed?
                        if (_this.getClickCounter() > _this.settings.maxSelect) {
                            // Yes
                            _this.warningMsg(clickedEl);
                            ev.currentTarget.classList.remove(_this.settings.activeClasses);
                        } else {
                            // No
                            _this.ariaToggle(clickedEl);
                            _this.removeMsg();
                        }
                    } else {
                        _this.removeButton(clickedEl);
                    }
                });
            },
            removeButton: function removeButton(el) {
                var contenerLi = el.parentNode.parentNode;
                var ul = contenerLi.parentNode;
                ul.removeChild(contenerLi);
            },
            ariaToggle: function ariaToggle(el) {
                var pressed = el.getAttribute('aria-pressed') === 'false';
                el.setAttribute('aria-pressed', pressed ? 'true' : 'false');
            },
            getClickCounter: function getClickCounter() {
                return document.querySelectorAll('.' + groupButton.settings.activeClasses).length;
            },
            warningMsg: function warningMsg(el) {
                var _this = groupButton;
                var parent = el.parentNode.parentNode;
                var theKid = document.createElement('div');
                var errorClass = document.querySelectorAll('.' + _this.settings.errorClassName);

                theKid.setAttribute('class', _this.settings.errorClassName);

                theKid.innerHTML = '<svg class="icon button--toggle-favourite-error-icon">\n                <use xlink:href="' + _this.settings.warningIconURL + '"></use></svg>\n                You\u2019ve reached your maximum of ' + _this.settings.maxSelect + ' items';

                if (errorClass.length < 1) {
                    parent.appendChild(theKid);
                }
            },
            removeMsg: function removeMsg() {
                var _this = groupButton;
                var errorClass = document.querySelector('.' + _this.settings.errorClassName);
                if (errorClass) {
                    var parent = document.querySelector('.' + _this.settings.errorClassName).parentNode;

                    parent.removeChild(document.querySelector('.' + _this.settings.errorClassName));
                }
            }

        };

        groupButton.init();
    }

    var bylineEl = document.querySelector('.js-byline-placeholder');
    // Check if it's an inside page with byline element. If so, it has to be Ajaxed and
    // injected into the DOM before initialising the edit user handler
    if (bylineEl) {
        var targetPageId = bylineEl.getAttribute('data-page-id');
        var sourceContents = bylineEl.getAttribute('data-source');
        var showBylineCtrlsFlag = bylineEl.getAttribute('data-showbylinecontrols');
        var siteID = bylineEl.getAttribute('data-site-id');
        var writeAccess = bylineEl.getAttribute('data-write-access');

        // Ajax the byline for inside pages
        $.ajax({
            url: sourceContents,
            type: 'get',
            data: {
                pageid: targetPageId,
                showbylinectrls: showBylineCtrlsFlag,
                siteid: siteID,
                writeaccess: writeAccess

            },
            success: function success(response) {
                // Inject the byline contents into the DOM
                bylineEl.insertAdjacentHTML('afterend', response);
                // Init User Metadata get/set handler
                initUserMetaHandler();

                initFavBtnsAnimations();
            }
        });
    } else {
        // Init User Metadata get/set handler
        initUserMetaHandler();

        initFavBtnsAnimations();
    }
})(jQuery);

/* global PageOverlay*/

var feedback = {
    config: {
        closeButton: document.getElementById('close-feedback-form'),
        toggleButton: document.getElementById('toggle-feedback-form'),
        feedbackForm: document.getElementById('feedback-form'),
        hiddenClass: 'feedback--hidden',
        thankYouMsg: document.getElementById('feedback-form') ? document.getElementById('feedback-form').getAttribute('data-thank-you') : '',
        thankYouMsgEnd: '<p>Anything else you\'d like to add? Feel free to <a href="#" class="js-thank-you-close">return to the feedback form</a>, we\'d love to hear what else you think.</p>'
    },
    hideFeedbackForm: function hideFeedbackForm() {
        feedback.config.toggleButton.setAttribute('aria-pressed', 'false');
        PageOverlay.hide();
        feedback.config.feedbackForm.classList.add(feedback.config.hiddenClass);
    },
    init: function init() {
        if (feedback.config.feedbackForm) {
            // Init page overlay block if it does not already exist.
            PageOverlay.init();
            // Attach toggle button events
            feedback.config.toggleButton.addEventListener('click', function () {
                // Feedback form is currently hidden - toggle show
                if (feedback.config.feedbackForm.classList.contains(feedback.config.hiddenClass)) {
                    feedback.showFeedbackForm();
                }
                // Feedback form is currently shown - toggle hide
                else {
                        feedback.hideFeedbackForm();
                    }
            });

            // Trigger form close when clicking outside
            document.querySelector('body').addEventListener('click', function (ev) {
                var feedbackForm = document.getElementById('feedback-form');
                var clickedElClass = ev.target.getAttribute('class') ? ev.target.getAttribute('class').split(' ')[0] : null;
                if (clickedElClass) {
                    var findEl = feedbackForm.querySelector('.' + clickedElClass);
                    if (!findEl) {
                        feedback.hideFeedbackForm();
                    }
                }
            });

            // Attach close button events
            feedback.config.closeButton.addEventListener('click', function () {
                feedback.hideFeedbackForm();
            });
            //Handle submission
            feedback.handleSubmission();
        }
    },
    showFeedbackForm: function showFeedbackForm() {
        feedback.config.toggleButton.setAttribute('aria-pressed', 'true');
        PageOverlay.show();
        feedback.config.feedbackForm.classList.remove(feedback.config.hiddenClass);
    },
    hideThankYou: function hideThankYou() {
        var fieldset = feedback.config.feedbackForm.querySelector('fieldset');
        var thankYou = fieldset.parentNode.querySelector('.js-thank-you');
        // Turn the fieldset visible
        fieldset.classList.remove('visuallyhidden');
        // Remove the Thank you message from the DOM
        fieldset.parentNode.removeChild(thankYou);
    },
    showThankYou: function showThankYou() {
        var fieldset = feedback.config.feedbackForm.querySelector('fieldset');
        // Hide the fieldset
        fieldset.classList.add('visuallyhidden');
        // Add the thank you message to the DOM
        $(fieldset).after('<legend class=" js-thank-you">            ' + feedback.config.thankYouMsg + ' ' + feedback.config.thankYouMsgEnd + '</legend>');
        // Event listener for the click over the thank you message close
        feedback.config.feedbackForm.querySelector('.js-thank-you-close').addEventListener('click', function (ev) {
            ev.preventDefault();
            // Hide the thank you message
            feedback.hideThankYou();
        });
    },
    handleSubmission: function handleSubmission() {
        // Define options object
        var options = {
            clearForm: true,
            beforeSubmit: function beforeSubmit(arr, $form) {
                return $form.valid();
            },
            success: function success() {
                feedback.showThankYou();
            }
        };
        $(feedback.config.feedbackForm).find('form').ajaxForm(options);
    }
};

(function () {
    'use strict';

    feedback.init();
})();

function initSelectric(element) {
    element.selectric({
        onInit: function onInit() {
            //If for detect msCrypto IE 11
            if (window.msCrypto) {
                window.crypto = window.msCrypto;
            }

            Array.from(document.querySelectorAll('.selectric-input')).forEach(function (el) {
                el.setAttribute('title', 'input-' + window.crypto.getRandomValues(new Uint32Array(1))[0]); // eslint-disable-line no-undef, max-len
            });

            $('#hidefieldsform').dependentQuestions();
        }
    });
}

(function () {
    'use strict';

    initSelectric($('select').not('.selectric-disabled'));

    $('select').on('selectric-change', function (event, element) {
        var selectedOption = element.querySelector('option[value="' + element.value + '"]');
        var newLoc = selectedOption.getAttribute('data-href');
        if (newLoc) {
            window.location.href = newLoc;
        }
    });

    var opts = {
        errorClass: 'control__text-input--error-text',
        errorPlacement: function errorPlacement(error, element) {
            $(element).get(0).parentNode.appendChild(error[0]);
        },
        // fn((element, errorClass, validClass))
        highlight: function highlight(element) {
            $(element).get(0).classList.add('control__text-input--error');
        },
        // fn element, errorClass, validClass)
        unhighlight: function unhighlight(element) {
            $(element).get(0).classList.remove('control__text-input--error');
        },
        rules: {
            reply: {
                required: true
            },
            rad: {
                required: true
            }
        }
    };

    $('.feedback__form').validate(opts);
    $('.form').validate(opts);
    $('form[id*="form_email"]').validate(opts);
})();

/* global UberAccordion */
function b64EncodeUnicode(str) {
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, pl) {
        return String.fromCharCode('0x' + pl);
    }));
}

var headerManager = {
    settings: {
        classes: {
            mobiletoggle: 'navbar__toggle',
            headerrow: 'header .header-row',
            init: 'header-manager-init',
            navshortcuts: 'nav-shortcuts',
            headersearch: 'header-search',
            megamenu: '#navbar__dropdown'
        }
    },
    init: function init() {
        var _this = this;
        // Add init flag, to ensure it only runs once
        document.querySelector('body').classList.add(_this.settings.classes.init);
        // Handle mobile toggle
        _this.handleMobileToggle();
        // Handle header tools (nav-shortcuts and header-search)
        _this.handleHeaderTools();
        //Hide nav shortcuts and search from the original source
        document.querySelector('.header-row .' + _this.settings.classes.navshortcuts).classList.add('mobile-hidden');
        document.querySelector('.header-row .' + _this.settings.classes.headersearch).classList.add('mobile-hidden');
    },
    /**
    *   Changes the DOM placement of the mobile menu toggle
    */
    handleMobileToggle: function handleMobileToggle() {
        var _this = headerManager;
        var toggle = document.querySelector('.' + _this.settings.classes.mobiletoggle);
        var target = document.querySelector('.' + _this.settings.classes.headerrow);
        _this.detachTo(toggle, target);
    },
    /**
    *   Clones the nav shortcuts and the header search to the mega menu
    */
    handleHeaderTools: function handleHeaderTools() {
        var _this = headerManager;
        var navShortcuts = document.querySelector('.' + _this.settings.classes.navshortcuts);
        var headerSearch = document.querySelector('.' + _this.settings.classes.headersearch);
        var target = document.querySelector(_this.settings.classes.megamenu);
        _this.clone(navShortcuts, target, 'desktop-hidden', 'prepend');
        _this.clone(headerSearch, target, 'desktop-hidden', 'prepend');
    },
    /**
    *   Utility function: Clones an element and appends/prepends it to a given target
    */
    clone: function clone(el, targetDest, classToApply, positionFlag) {
        var clonedNode = el.cloneNode(true);
        clonedNode.classList.add(classToApply);

        // Generate mobile IDs, so we don't have duplicates
        headerManager.generateIds(clonedNode);

        if (positionFlag === 'append') {
            targetDest.appendChild(clonedNode);
        } else {
            targetDest.insertBefore(clonedNode, targetDest.firstChild);
        }
    },
    /**
    *   Utility function: Detaches an element and appends it to a given target
    */
    detachTo: function detachTo(el, targetDest) {
        return $(el).detach().appendTo(targetDest);
    },
    generateIds: function generateIds(elGroup) {
        var elsWithID = elGroup.querySelectorAll('[id]');
        if (elsWithID.length) {
            Array.from(elsWithID).forEach(function (el) {
                // Get el's original ID
                var originalID = el.getAttribute('id');
                // Generate a new ID
                var newID = b64EncodeUnicode(originalID);
                // Replace the old ID by the new one
                el.setAttribute('id', newID);
                // Look for a label that points to that same original ID
                var label = elGroup.querySelector('[for="' + originalID + '"]');
                if (label) {
                    //There's a label pointing to the old id. Lets replace it as well
                    label.setAttribute('for', newID);
                }
            });
        }
    }
};

(function () {

    if (document.querySelector('.' + headerManager.settings.classes.headerrow)) {

        var minMq = '(min-width: 85em)';
        window.matchMedia(minMq).addListener(function (mql) {
            if (!mql.matches) {
                //Ensure it only runs once
                if (!document.querySelector('body').classList.contains(headerManager.settings.classes.init)) {
                    headerManager.init();
                }
            }
        });

        if (!window.matchMedia(minMq).matches) {
            headerManager.init();
        }
    }
})();
window.alert = function () {
    return true;
};

var mobileMegaMenu = {
    settings: {
        megamenuClass: 'js-mega-menu-list',
        megamenuWrapperClass: '.sub-mega-nav, .sub-sub-mega-nav',
        activeClass: 'navbar__item--active',
        currentParentClass: 'js-current-parent',
        clickTriggerClass: '.navbar__item-link, .navbar__item-sub-link',
        slideSpeed: 50,
        arrowHTMLString: '<i class="fa fa-angle-down desktop-hidden" aria-hidden="true" tabindex="0"></i>',
        arrowClassSelector: 'fa'
    },
    init: function init() {
        var _this = this;

        if (document.querySelectorAll('.' + _this.settings.megamenuClass).length > 0) {
            _this.reset(); // Reset active classes
            _this.addArrows(); // Add Arrows
            _this.handleClicks(); // Set click handlers
            _this.expandCurrent(); // Expand the current
        }
    },
    handleClicks: function handleClicks() {
        var $arrows = $(mobileMegaMenu.settings.clickTriggerClass).find('.' + mobileMegaMenu.settings.arrowClassSelector);

        $arrows.on('click.mobile', function (ev) {
            ev.preventDefault();
            var megamenu = ev.target.parentNode.nextElementSibling;
            if (!megamenu) {
                return;
            }

            var navbarItem = ev.target.parentNode.parentNode;
            var $megamenu = $(megamenu);

            if ($megamenu.is(':visible')) {
                $megamenu.slideUp(mobileMegaMenu.settings.slideSpeed, function () {
                    navbarItem.classList.remove(mobileMegaMenu.settings.activeClass);
                });
            } else {
                $megamenu.slideDown(mobileMegaMenu.settings.slideSpeed, function () {
                    navbarItem.classList.add(mobileMegaMenu.settings.activeClass);
                });
            }
        });
    },
    expandCurrent: function expandCurrent() {
        Array.from(document.querySelectorAll('.' + mobileMegaMenu.settings.currentParentClass)).forEach(function (el) {
            $(el).find('.' + mobileMegaMenu.settings.arrowClassSelector).trigger('click.mobile');
        });;
    },
    addArrows: function addArrows() {
        Array.from(document.querySelectorAll('.' + mobileMegaMenu.settings.megamenuClass)).forEach(function (el) {
            var target = $(el).closest(mobileMegaMenu.settings.megamenuWrapperClass).prev();
            if (!target.find('.' + mobileMegaMenu.settings.arrowClassSelector).length) {
                target.append(mobileMegaMenu.settings.arrowHTMLString);
            }
        });
    },
    destroy: function destroy() {
        var triggers = '' + mobileMegaMenu.settings.clickTriggerClass;
        $(triggers).find('.' + mobileMegaMenu.settings.arrowClassSelector).off('click.mobile');
        Array.from(document.querySelectorAll(mobileMegaMenu.settings.megamenuWrapperClass)).forEach(function (el) {
            el.setAttribute('style', '');
        });
    },
    reset: function reset() {
        var activeElement = document.querySelector('.' + mobileMegaMenu.settings.activeClass);
        if (activeElement) {
            activeElement.classList.remove(mobileMegaMenu.settings.activeClass);
        }
    }
};

(function () {
    window.onload = function () {
        var minMq = '(min-width: 85em)';
        window.matchMedia(minMq).addListener(function (mql) {
            if (!mql.matches) {
                mobileMegaMenu.init();
            } else {
                mobileMegaMenu.reset();
                mobileMegaMenu.destroy();
            }
        });

        if (!window.matchMedia(minMq).matches) {
            mobileMegaMenu.init();
        }

        $('body').on('click', '.navbar__toggle', function () {
            mobileMegaMenu.reset();
            mobileMegaMenu.destroy();
            mobileMegaMenu.init();
        });
    };
})();

/*global $*/
var sidebarMenu = {
    settings: {
        toggleMarkup: '<button type="button" class="fa fa-angle-right" aria-pressed="false"></button>',
        toggleClass: 'nav-sidebar__toggle',
        toggleModifierClass: '--level',
        lvlAttr: 'data-level',
        toggleTrigger: 'nav-sidebar__link',
        childrenList: 'list--plain',
        currentParent: '.nav-sidebar .js-current-parent'
    },
    init: function init() {
        var _this = sidebarMenu;
        _this.addToggles();
        _this.addLevels();
        _this.addID();
        _this.addAccordion();
        _this.hideLevels();
        _this.handleListeners();
        _this.expandCurrent();
    },
    addToggles: function addToggles() {
        var _this = sidebarMenu;
        var settings = _this.settings;
        Array.from(document.querySelectorAll('.' + settings.toggleTrigger)).forEach(function (trigger) {
            var sibling = trigger.nextElementSibling; // the children list
            // Does the current item have children?
            if (sibling && sibling.classList.contains(settings.childrenList) && sibling.querySelector('li')) {
                var lvl = trigger.getAttribute(settings.lvlAttr); // the current level
                // Add toggle button
                $(trigger).before(settings.toggleMarkup);
                // Add required classes to the toggle button
                trigger.previousElementSibling.classList.add('' + settings.toggleClass + settings.toggleModifierClass + lvl);
                // Set the inner html for the toggle button
                trigger.previousElementSibling.innerHTML = 'Level ' + lvl;
            }
        });
    },
    addLevels: function addLevels() {
        $('.nav-sidebar ul').each(function (index, el) {
            //ul
            var levels = $(el).parents('ul').length + 1;
            $(el).addClass('nav-sidebar__menu--level' + levels);
            if (index > 0) {
                $(el).addClass('js-nav-sidebar-menu');
            }

            //li
            var $li = $(el).children('li');
            $li.addClass('nav-sidebar__item--level' + levels);

            //butons
            $li.children('button').addClass('nav-sidebar__toggle--level' + levels);
            $li.children('button').addClass('js-nav-sidebar-toggle');
        });
    },
    hideLevels: function hideLevels() {
        if ($('.js-nav-sidebar-menu').attr('aria-expanded')) {
            $('.js-nav-sidebar-menu').css('display', 'none');
        }
    },
    addID: function addID() {
        $('.js-nav-sidebar-toggle').each(function (index, el) {
            $(el).attr('aria-controls', 'nav-sidebar__menu' + index);
        });
        $('.js-nav-sidebar-menu').each(function (index, el) {
            $(el).attr('id', 'nav-sidebar__menu' + index);
        });
    },
    addAccordion: function addAccordion() {
        $('.nav-sidebar').UberAccordion({ // eslint-disable-line new-cap
            buttonClass: 'js-nav-sidebar-toggle'
        });
    },
    handleListeners: function handleListeners() {
        $('.js-nav-sidebar-toggle').on('click', function (event) {
            var pressed = event.target.getAttribute('aria-pressed') === 'false';
            //change the aria-pressed value as the button is toggled:
            event.target.setAttribute('aria-pressed', pressed ? 'true' : 'false');
            var id = $(this).attr('aria-controls');
            if (pressed) {
                $('#' + id).css('display', 'block');
                $(this).removeClass('fa-angle-right');
                $(this).addClass('fa-angle-down');
            } else {
                $('#' + id).css('display', 'none');
                $(this).removeClass('fa-angle-down');
                $(this).addClass('fa-angle-right');
            }
        });
    },
    expandCurrent: function expandCurrent() {
        var parentsArr = Array.from(document.querySelectorAll(sidebarMenu.settings.currentParent));
        var event = document.createEvent('HTMLEvents');
        event.initEvent('click', true, false);
        parentsArr.forEach(function (el) {
            var toggler = el.previousElementSibling;
            if (toggler) {
                toggler.dispatchEvent(event);
            }
        });
    }
};

(function () {
    'use strict';

    sidebarMenu.init();
})();

var navLinks = {
    settings: {
        link: 'nav-site-section__link',
        trigger: 'js-nav-link-ctrl',
        active: 'nav-site-section__link--active'
    },
    init: function init() {
        var links = Array.from(document.querySelectorAll('.' + navLinks.settings.trigger));
        navLinks.handleActiveStates(links);
    },
    handleActiveStates: function handleActiveStates(arrEls) {
        arrEls.forEach(function (el) {
            el.addEventListener('click', function (ev) {
                var linkEl = ev.target;
                var siblings = navLinks.getSiblings(linkEl.parentNode.parentNode, navLinks.settings.link, el);
                //Toggle active class
                linkEl.classList.toggle(navLinks.settings.active);
                //Remove active class from the siblings
                siblings.forEach(function (sib) {
                    sib.querySelector('.' + navLinks.settings.link).classList.remove(navLinks.settings.active);
                });
            });
        });
    },
    getSiblings: function getSiblings(parent, targetClass, current) {
        return Array.prototype.filter.call(parent.children, function (child) {
            return child.querySelector('.' + targetClass) !== current;
        });
    }
};

(function () {
    'use strict';

    navLinks.init();
})(jQuery);

var navSidebarFilterHandler = {
    settings: {
        filters: 'nav-search-filters__item-link',
        nav: 'nav-search-filters',
        spanClass: 'nav-search-filters__item-checkbox',
        spanTag: 'SPAN',
        activeClasses: {
            span: 'nav-search-filters__item-checkbox--active'
        }
    },
    init: function init() {
        var _this = navSidebarFilterHandler;
        var elems = document.querySelectorAll('.' + _this.settings.nav);
        if (elems.length > 0) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {

                for (var _iterator2 = elems[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var el = _step2.value;

                    _this.setEventHandlers(el);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    },

    setEventHandlers: function setEventHandlers(actualEl) {
        var _this = navSidebarFilterHandler;

        actualEl.addEventListener('click', function (ev) {
            if (ev.target.className === _this.settings.filters) {

                var spanFilter = ev.target.querySelector('.' + _this.settings.spanClass);
                _this.toggleClass(spanFilter, _this.settings.activeClasses.span);
            } else if (ev.target.tagName === _this.settings.spanTag) {

                var _spanFilter = ev.target;
                _this.toggleClass(_spanFilter, _this.settings.activeClasses.span);
            }
        });
    },

    toggleClass: function toggleClass(el, className) {
        el.classList.toggle(className);
    }
};

var mobileNavSearchFilter = {
    settings: {
        openButton: 'nav-search-filters__trigger-btn',
        clearBtn: 'nav-search-filters__clear-btn',
        doneBtn: 'nav-search-filters__done-btn',
        navSlideID: 'nav-search-filters-slide',
        activCheckbox: 'nav-search-filters__item-checkbox--active',
        toggleClass: ['nav-search-filters__slide-out--active', 'nav-search-filters--open']
    },

    init: function init() {
        var _this = mobileNavSearchFilter;
        if (document.querySelector('#' + _this.settings.navSlideID)) {
            var toggBtn = document.querySelectorAll('.' + _this.settings.openButton);

            if (toggBtn.length > 0) {
                var _iteratorNormalCompletion3 = true;
                var _didIteratorError3 = false;
                var _iteratorError3 = undefined;

                try {
                    for (var _iterator3 = toggBtn[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                        var btn = _step3.value;

                        _this.openCloseMenu(btn);
                    }
                } catch (err) {
                    _didIteratorError3 = true;
                    _iteratorError3 = err;
                } finally {
                    try {
                        if (!_iteratorNormalCompletion3 && _iterator3.return) {
                            _iterator3.return();
                        }
                    } finally {
                        if (_didIteratorError3) {
                            throw _iteratorError3;
                        }
                    }
                }

                _this.clearMenu();
                _this.doneMenu();
            }
        }
    },

    openCloseMenu: function openCloseMenu(element) {
        var _this = mobileNavSearchFilter;
        var nav = document.querySelector('#' + _this.settings.navSlideID);
        var filter = nav.querySelector('.nav-search-filters');

        element.addEventListener('click', function (ev) {
            ev.preventDefault();

            _this.toggleClass(nav, _this.settings.toggleClass[0]);
            _this.toggleClass(filter, _this.settings.toggleClass[1]);
        });
    },
    toggleClass: function toggleClass(el, className) {
        el.classList.toggle(className);
    },

    clearMenu: function clearMenu() {
        var _this = mobileNavSearchFilter;
        var clear = document.querySelector('.' + _this.settings.clearBtn);

        clear.addEventListener('click', function (ev) {
            ev.preventDefault();
            var active = document.querySelectorAll('.' + _this.settings.activCheckbox);

            var _iteratorNormalCompletion4 = true;
            var _didIteratorError4 = false;
            var _iteratorError4 = undefined;

            try {
                for (var _iterator4 = active[Symbol.iterator](), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {
                    var el = _step4.value;

                    el.classList.remove(_this.settings.activCheckbox);
                }
            } catch (err) {
                _didIteratorError4 = true;
                _iteratorError4 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion4 && _iterator4.return) {
                        _iterator4.return();
                    }
                } finally {
                    if (_didIteratorError4) {
                        throw _iteratorError4;
                    }
                }
            }
        });
    },

    doneMenu: function doneMenu() {
        var _this = mobileNavSearchFilter;
        var done = document.querySelector('.' + _this.settings.doneBtn);

        _this.openCloseMenu(done);
    }
};

(function () {
    'use strict';

    navSidebarFilterHandler.init();
    mobileNavSearchFilter.init();

    //Date filters handler
    var dateFilters = Array.from(document.querySelectorAll('.js-date-filter-ctrl'));
    dateFilters.forEach(function (el) {
        el.addEventListener('click', function (ev) {
            ev.target.classList.toggle('filter--ascending');
        });
    });

    // Ability to preserve the existing query string parameters when executing a new search after searching for something at first
    var searchForm = document.querySelector('.js-dynamic-qs');
    // Check if it's on the search page
    if (searchForm) {
        var currentQs = searchForm.getAttribute('data-qs');
        // Check if the QS is not empty
        if (currentQs.length) {
            (function () {
                var exclusionsArr = ['query', 'num_ranks', 'start_rank'];
                // Reduce the current QS in order to return HTML entities to add to the DOM as hidden inputs
                var mappedHiddenFields = currentQs.split('&').reduce(function (acc, el) {
                    var key = decodeURIComponent(el.split('=')[0]);
                    var val = el.split('=')[1];
                    return exclusionsArr.indexOf(key) === -1 ? acc + '<input type="hidden" name="' + key + '" value="' + val + '" />' : acc;
                }, '');
                // Add the reduced QS into the DOM
                $(searchForm).find('input').after(mappedHiddenFields);
            })();
        }
    }
})(jQuery);

(function ($) {
    'use strict';

    $('.content table').wrap('<div class="table-wrapper"></div>');
})(jQuery);

function detectIE() {
    var ua = window.navigator.userAgent;

    var msie = ua.indexOf('MSIE ');
    if (msie > 0) {
        // IE 10 or older => return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    }

    var trident = ua.indexOf('Trident/');
    if (trident > 0) {
        // IE 11 => return version number
        var rv = ua.indexOf('rv:');
        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
    }

    var edge = ua.indexOf('Edge/');
    if (edge > 0) {
        // Edge (IE 12+) => return version number
        return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
    }

    // other browser
    return false;
}

var objectFit = function objectFit(selector, settings) {
    if ($(selector).length && !Modernizr.objectfit) {

        var $this = $(selector),
            objs = [],
            // eslint-disable-line no-unused-vars
        settings = {
            display: undefined === settings.display ? 'block' : settings.display,
            position: undefined === settings.position ? 'center center' : settings.position,
            adjustHeight: undefined === settings.adjustHeight ? false : settings.adjustHeight
        };

        // Init
        objs = $this.toArray().map(function (el, i) {
            // eslint-disable-line no-unused-vars

            // adjust height if required
            if (settings.adjustHeight) {
                $(selector).hide();
                $(el).parent().css('height', '');
                $(el).parent().css('height', $(el).height());
                $(selector).show();
            }

            // set the bg image
            $(el).css('opacity', 0);
            $(el).parent().css({
                'background-image': 'url(' + $(el).attr('src') + ')',
                'background-size': 'cover',
                'background-position': settings.position,
                'display': settings.display
            });
        });
    }
};

(function () {
    'use strict';

    if (detectIE()) {
        objectFit('.tile--marketing .tile__thumb-image', {
            'display': 'flex',
            'adjustHeight': true
        });

        objectFit('.nav-site-section__banner-image', {
            'display': 'initial',
            'adjustHeight': true
        });
    }
})(jQuery);
//# sourceMappingURL=global.min.js.map
