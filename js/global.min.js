/*global jQuery*/
/**
 * la-trobe-university-intranet
 * Global JS
 *
 * version: 0.1.0
 * file:    global.min.js
 * author:  Squiz Australia
 * change log:
 *     Tue Dec 06 2016 12:07:02 GMT+0100 (CET) - First revision
 */

/*
 * Table of Contents
 *
 * - Global
 * - Modules

 */
'use strict';
/*
--------------------
Global
--------------------
*/
//  Declare JS Enabled.

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

$('body').removeClass('no-js').addClass('js-enabled');

/*
--------------------
Modules
--------------------
*/

(function ($) {
    // First example is a standard accordion
    /*eslint new-cap: 0*/
    $('.accordion').UberAccordion({
        buttonClass: 'accordion__link',
        autoExpand: '#accordion__target-1',
        toggle: true,
        multiple: true,
        expandOnFocus: false,
        preventDefaultButton: true,
        hashChange: true
    });

    // Second example is a tab-like setup
    $('.tabs').UberAccordion({
        buttonClass: 'tabs__link',

        autoExpand: function autoExpand() {
            return window.location.hash || '#tabs__target-1';
        },

        toggle: false,
        multiple: false,
        preventDefaultButton: true
    });
})(jQuery);

(function ($) {
    var getContainerForInput = function getContainerForInput(elem) {
        var $container = $(elem).parents('.sq-form-question');
        return $container;
    };

    var options = {
        errorClass: 'sq-form-error',
        errorPlacement: function errorPlacement(error, element) {
            var $container = $(element).parents('.sq-form-question-answer');
            if ($(element).attr('id') === 'recaptcha_response_field') {
                error.insertAfter(element);
            } else {
                $container.append(error);
            }
        },

        // fn((element, errorClass, validClass))
        highlight: function highlight(element) {
            getContainerForInput(element).addClass('sq-form-question-error');
        },

        // fn element, errorClass, validClass)
        unhighlight: function unhighlight(element) {
            getContainerForInput(element).removeClass('sq-form-question-error');
        }
    };

    $('.sq-form').validate(options);
})(jQuery);

/*eslint no-console: 0, new-cap: 0*/
(function ($) {
    // Match this with the breakpoint at which the screen transforms
    // from smaller size to medium size
    var minMq = '(min-width: 85em)';
    var $body = $('body');
    var $nav = $('#navbar__dropdown');

    // Load the menu
    function loadMenu() {
        var isCurrent = $nav.find('.navbar__item--current .sub-nav').length !== 0;
        $nav.NavBar({
            onState: function onState($item, active) {
                if (isCurrent) {
                    return;
                }
                if ($item.find('.sub-nav').length && active) {
                    $body.addClass('is-nav-active');
                } else {
                    $body.removeClass('is-nav-active');
                }
            }
        });

        if (isCurrent) {
            $body.addClass('is-nav-active');
        }
    }

    // Mobile button toggler
    $('.nav-main').UberAccordion({
        buttonClass: 'navbar__toggle'
    });

    var el = document.querySelector('.nav-main');

    // Bind menu load when transitioning media query breakpoints
    window.matchMedia(minMq).addListener(function (mql) {
        // Emoty console statement needed to ensure FF always runs this
        if (mql.matches) {
            loadMenu();
            el.classList.remove('nav-main--mobile');
            el.classList.add('nav-main--desktop');
        } else {
            $nav.NavBar('clearState');
            el.classList.add('nav-main--mobile');
            el.classList.remove('nav-main--desktop');
        }
    });

    if (window.matchMedia(minMq).matches) {
        loadMenu();
    } else {
        el.classList.add('nav-main--mobile');
        el.classList.remove('nav-main--desktop');
    }
})(jQuery);

(function ($) {
    var $searchInput = $('#quick-search__query');
    // Mimick placeholder support where it is not available.
    // Credit: http://webdesignerwall.com/tutorials/cross-browser-html5-placeholder-text
    if (!Modernizr.input.placeholder && $searchInput.attr('placeholder') !== '') {
        $searchInput.focus(function () {
            var input = $(this);
            if (input.val() === input.attr('placeholder')) {
                input.val('');
                input.removeClass('placeholder');
            }
        }).blur(function () {
            var input = $(this);
            if (input.val() === '' || input.val() === input.attr('placeholder')) {
                input.addClass('placeholder');
                input.val(input.attr('placeholder'));
            }
        }).blur();
        $searchInput.parents('form').submit(function () {
            $(this).find('[placeholder]').each(function () {
                var input = $(this);
                if (input.val() === input.attr('placeholder')) {
                    input.val('');
                }
            });
        });
    } //end if
})(jQuery);

(function ($) {
    var carousel = document.querySelector('.js-carousel');
    if (carousel !== null) {
        var caNext = carousel.getAttribute('data-arrow-next');
        var caPrevious = carousel.getAttribute('data-arrow-previous');
        var $slideshow = $('.js-carousel');
        var buttonTemplateNext = ['<button type="button" class="slick-next">', '<svg class="icon slick-arrow__icon">', '<use xlink:href="' + caNext + '"></use>', '</svg>', 'Next Slide', '</button>'].join('');
        var buttonTemplatePrevious = ['<button type="button" class="slick-prev">', '<svg class="icon slick-arrow__icon">', '<use xlink:href="' + caPrevious + '"></use>', '</svg>', 'Previous Slide', '</button>'].join('');

        $slideshow.slick({
            dots: true,
            customPaging: function customPaging() {
                return '<span class="dots"></span>';
            },
            arrows: true,
            fade: true,
            speed: 400,
            slide: '.carousel__slide',
            slidesToScroll: 1,
            slidesToShow: 1,
            nextArrow: buttonTemplateNext,
            prevArrow: buttonTemplatePrevious
        });
    }
})(jQuery);

var groupButton = {
    settings: {
        favButtonName: 'js-toggle-favourite',
        delButtonName: 'button--delete',
        activeClasses: document.querySelector('[data-active-class]') ? document.querySelector('[data-active-class]').getAttribute('data-active-class') : 'button--toggle-favourite-active',
        errorClassName: 'button--toggle-favourite-error',
        maxSelect: document.querySelector('[data-max-items]') ? parseInt(document.querySelector('[data-max-items]').getAttribute('data-max-items'), 10) : 5,
        warningIconURL: document.querySelector('[data-btn-warning-url]') ? document.querySelector('[data-btn-warning-url]').getAttribute('data-btn-warning-url') : ''
    },

    init: function init() {
        var _this = groupButton;

        var listsFav = document.querySelectorAll('.' + _this.settings.favButtonName);

        var listsDel = document.querySelectorAll('.' + _this.settings.delButtonName);

        _this.listsEvent(listsFav);

        _this.listsEvent(listsDel);
    },
    listsEvent: function listsEvent(lists) {
        var _this = groupButton;

        Array.from(lists).forEach(function (el) {
            _this.eventListener(el);
        });

        // for (const el of lists) {
        //     _this.eventListener(el);
        // }
    },
    eventListener: function eventListener(actualEl) {
        var _this = groupButton;

        // Polyfill for includes
        if (!String.prototype.includes) {
            String.prototype.includes = function () {
                'use strict';

                return String.prototype.indexOf.apply(this, arguments) !== -1;
            };
        }

        actualEl.addEventListener('click', function (ev) {
            ev.preventDefault();
            if (ev.currentTarget.className.includes(_this.settings.favButtonName)) {
                _this.toggleClass(ev.currentTarget, _this.settings.activeClasses);
                if (_this.clickCounter() > _this.settings.maxSelect) {
                    _this.warningMsg(ev.currentTarget);
                    _this.removeClass(ev.currentTarget, _this.settings.activeClasses);
                } else {
                    _this.ariaToggle(ev.currentTarget);
                    _this.removeMsg();
                }
            } else {
                _this.removeButton(ev.currentTarget);
            }
        });
    },

    toggleClass: function toggleClass(el, className) {
        el.classList.toggle(className);
    },

    removeClass: function removeClass(el, className) {
        el.classList.remove(className);
    },

    removeButton: function removeButton(el) {
        var contenerLi = el.parentNode.parentNode;
        var ul = contenerLi.parentNode;
        ul.removeChild(contenerLi);
    },

    ariaToggle: function ariaToggle(el) {
        var pressed = el.getAttribute('aria-pressed') === 'false';

        el.setAttribute('aria-pressed', pressed ? 'true' : 'false');
    },

    clickCounter: function clickCounter() {
        var _this = groupButton;
        var numb = document.querySelectorAll('.' + _this.settings.activeClasses).length;
        return numb;
    },

    warningMsg: function warningMsg(el) {
        var _this = groupButton;
        var parent = el.parentNode.parentNode;
        var theKid = document.createElement('div');
        var errorClass = document.querySelectorAll('.' + _this.settings.errorClassName);

        theKid.setAttribute('class', _this.settings.errorClassName);

        theKid.innerHTML = '<svg class="icon button--toggle-favourite-error-icon">\n        <use xlink:href="' + _this.settings.warningIconURL + '"></use></svg>\n        You\u2019ve reached your maximum of ' + _this.settings.maxSelect + ' items';

        if (errorClass.length < 1) {
            parent.appendChild(theKid);
        }
    },

    removeMsg: function removeMsg() {
        var _this = groupButton;
        var errorClass = document.querySelector('.' + _this.settings.errorClassName);
        if (errorClass) {
            var parent = document.querySelector('.' + _this.settings.errorClassName).parentNode;

            parent.removeChild(document.querySelector('.' + _this.settings.errorClassName));
        }
    }

};

(function ($) {
    'use strict';

    groupButton.init();
})(jQuery);

(function ($) {
    'use strict';

    var newsCategories = document.querySelector('meta[name="News.Categories"]'),
        projectCategories = document.querySelector('meta[name="Project.Categories"]'),
        contentFooter = document.querySelector('.content-footer'),
        contentFooterTags = document.querySelector('.content-footer .nav-tags-group'),
        categoryTags = document.getElementById('category-nav-tags'),
        categoryTagsHTML = '';

    /*
        Identifies if the page is News or Project and gets the propery query string parameter
        for the FB collection based on a hidden input placed in the global variables
    */
    function getQueryStringParam(arrNews, arrProjs) {
        var qsp = '';
        if (arrNews.length) {
            qsp = document.getElementById('news-categories-qstring') ? document.getElementById('news-categories-qstring').value : '';
        } else if (arrProjs.length) {
            qsp = document.getElementById('projects-categories-qstring') ? document.getElementById('projects-categories-qstring').value : '';
        }
        return qsp;
    }

    /* Parse all categories in HTML head metadata, then render as HTML in content footer.
     */
    function renderCategoryTags(tags, arrNews, arrProjs) {
        var richTags = [],
            renderedTags = '',
            siteSearchURL = document.getElementById('site-search-url') ? document.getElementById('site-search-url').value : '';
        if (!tags.length) {
            return renderedTags;
        }
        tags.forEach(function (tag) {
            var tagHTML = ['<a href="', siteSearchURL, '?query=!nullquery', '&', getQueryStringParam(arrNews, arrProjs) + '=' + encodeURIComponent(tag.toLowerCase()), '" class="nav-tag__link btn button--tag">', tag, '</a>'].join('');
            richTags.push(tagHTML);
        });
        renderedTags = richTags.join('\n');
        return renderedTags;
    }

    function categoriesExist(tags) {
        return tags.length;
    }

    newsCategories = newsCategories ? newsCategories.getAttribute('content') : '';
    newsCategories = newsCategories ? newsCategories.split('; ') : [];

    projectCategories = projectCategories ? projectCategories.getAttribute('content') : '';
    projectCategories = projectCategories ? projectCategories.split('; ') : [];

    /* Content footer exists but tag container does not, so create
     * the tag container.
     */
    if (contentFooter && !contentFooterTags) {
        contentFooterTags = document.createElement('ul');
        contentFooterTags.classList.add('nav-tags-group');
        $(contentFooter).append($(contentFooterTags));
    }

    // Category tag group does not exist.
    var spreadedCats = [].concat(_toConsumableArray(newsCategories), _toConsumableArray(projectCategories));
    if (!categoryTags && categoriesExist(spreadedCats)) {
        categoryTagsHTML = '<li id="category-nav-tags" class="nav-tags">' + '<span class="nav-tags__heading">Categories</span>' + '<ul class="nav-tags__list">' + '<li class="nav-tag">' + renderCategoryTags(spreadedCats, newsCategories, projectCategories) + '</li>' + '</ul>' + '</li>';
        categoryTags = $(categoryTagsHTML).prependTo($(contentFooterTags));
        categoryTags = categoryTags[0];
    }
})(jQuery);

function initSelectric(element) {
    element.selectric({
        onInit: function onInit() {
            //If for detect msCrypto IE 11
            if (window.msCrypto) {
                window.crypto = window.msCrypto;
            }

            Array.from(document.querySelectorAll('.selectric-input')).forEach(function (el) {
                el.setAttribute('title', 'input-' + window.crypto.getRandomValues(new Uint32Array(1))[0]); // eslint-disable-line no-undef, max-len
            });
        }
    });
}

(function ($) {
    'use strict';

    initSelectric($('select').not('.selectric-disabled'));

    $('select').on('selectric-change', function (event, element) {
        var selectedOption = element.querySelector('option[value="' + element.value + '"]');
        var newLoc = selectedOption.getAttribute('data-href');
        if (newLoc) {
            window.location.href = newLoc;
        }
    });
})(jQuery);

/* global PageOverlay*/

var feedback = {
    config: {
        closeButton: document.getElementById('close-feedback-form'),
        toggleButton: document.getElementById('toggle-feedback-form'),
        feedbackForm: document.getElementById('feedback-form'),
        hiddenClass: 'feedback--hidden',
        thankYouMsg: document.getElementById('feedback-form').getAttribute('data-thank-you'),
        thankYouMsgEnd: '<p>Anything else you\'d like to add? Feel free to <a href="#" class="js-thank-you-close">return to the feedback form</a>, we\'d love to hear what else you think.</p>'
    },
    hideFeedbackForm: function hideFeedbackForm() {
        feedback.config.toggleButton.setAttribute('aria-pressed', 'false');
        PageOverlay.hide();
        feedback.config.feedbackForm.classList.add(feedback.config.hiddenClass);
    },
    init: function init() {
        if (feedback.config.feedbackForm) {
            // Init page overlay block if it does not already exist.
            PageOverlay.init();
            // Attach toggle button events
            feedback.config.toggleButton.addEventListener('click', function () {
                // Feedback form is currently hidden - toggle show
                if (feedback.config.feedbackForm.classList.contains(feedback.config.hiddenClass)) {
                    feedback.showFeedbackForm();
                }
                // Feedback form is currently shown - toggle hide
                else {
                        feedback.hideFeedbackForm();
                    }
            });
            // Attach close button events
            feedback.config.closeButton.addEventListener('click', function () {
                feedback.hideFeedbackForm();
            });
            //Handle submission
            feedback.handleSubmission();
        }
    },
    showFeedbackForm: function showFeedbackForm() {
        feedback.config.toggleButton.setAttribute('aria-pressed', 'true');
        PageOverlay.show();
        feedback.config.feedbackForm.classList.remove(feedback.config.hiddenClass);
    },
    hideThankYou: function hideThankYou() {
        var fieldset = feedback.config.feedbackForm.querySelector('fieldset');
        var thankYou = fieldset.parentNode.querySelector('.js-thank-you');
        // Turn the fieldset visible
        fieldset.classList.remove('visuallyhidden');
        // Remove the Thank you message from the DOM
        fieldset.parentNode.removeChild(thankYou);
    },
    showThankYou: function showThankYou() {
        var fieldset = feedback.config.feedbackForm.querySelector('fieldset');
        // Hide the fieldset
        fieldset.classList.add('visuallyhidden');
        // Add the thank you message to the DOM
        $(fieldset).after('<legend class=" js-thank-you">            ' + feedback.config.thankYouMsg + ' ' + feedback.config.thankYouMsgEnd + '</legend>');
        // Event listener for the click over the thank you message close
        feedback.config.feedbackForm.querySelector('.js-thank-you-close').addEventListener('click', function (ev) {
            ev.preventDefault();
            // Hide the thank you message
            feedback.hideThankYou();
        });
    },
    handleSubmission: function handleSubmission() {
        // Define options object
        var options = {
            clearForm: true,
            beforeSubmit: function beforeSubmit(arr, $form) {
                return $form.valid();
            },
            success: function success() {
                feedback.showThankYou();
            }
        };
        $(feedback.config.feedbackForm).find('form').ajaxForm(options);
    }
};

(function () {
    'use strict';

    feedback.init();
})();

(function ($) {
    'use strict';

    var opts = {
        errorClass: 'control__text-input--error-text',
        errorPlacement: function errorPlacement(error, element) {
            $(element).get(0).parentNode.appendChild(error[0]);
        },
        // fn((element, errorClass, validClass))
        highlight: function highlight(element) {
            $(element).get(0).classList.add('control__text-input--error');
        },
        // fn element, errorClass, validClass)
        unhighlight: function unhighlight(element) {
            $(element).get(0).classList.remove('control__text-input--error');
        },
        rules: {
            reply: {
                required: true
            },
            rad: {
                required: true
            }
        }
    };
    $('.feedback__form').validate(opts);
    $('.form').validate(opts);
})(jQuery);

/* global UberAccordion */
function b64EncodeUnicode(str) {
    return btoa(encodeURIComponent(str).replace(/%([0-9A-F]{2})/g, function (match, pl) {
        return String.fromCharCode('0x' + pl);
    }));
}

var headerManager = {
    settings: {
        classes: {
            mobiletoggle: 'navbar__toggle',
            headerrow: 'header .header-row',
            init: 'header-manager-init',
            navshortcuts: 'nav-shortcuts',
            headersearch: 'header-search',
            megamenu: '#navbar__dropdown'
        }
    },
    init: function init() {
        var _this = this;
        // Add init flag, to ensure it only runs once
        document.querySelector('body').classList.add(_this.settings.classes.init);
        // Handle mobile toggle
        _this.handleMobileToggle();
        // Handle header tools (nav-shortcuts and header-search)
        _this.handleHeaderTools();
        //Hide nav shortcuts and search from the original source
        document.querySelector('.header-row .' + _this.settings.classes.navshortcuts).classList.add('mobile-hidden');
        document.querySelector('.header-row .' + _this.settings.classes.headersearch).classList.add('mobile-hidden');
    },
    /**
    *   Changes the DOM placement of the mobile menu toggle
    */
    handleMobileToggle: function handleMobileToggle() {
        var _this = headerManager;
        var toggle = document.querySelector('.' + _this.settings.classes.mobiletoggle);
        var target = document.querySelector('.' + _this.settings.classes.headerrow);
        _this.detachTo(toggle, target);
    },
    /**
    *   Clones the nav shortcuts and the header search to the mega menu
    */
    handleHeaderTools: function handleHeaderTools() {
        var _this = headerManager;
        var navShortcuts = document.querySelector('.' + _this.settings.classes.navshortcuts);
        var headerSearch = document.querySelector('.' + _this.settings.classes.headersearch);
        var target = document.querySelector(_this.settings.classes.megamenu);
        _this.clone(navShortcuts, target, 'desktop-hidden', 'prepend');
        _this.clone(headerSearch, target, 'desktop-hidden', 'prepend');
    },
    /**
    *   Utility function: Clones an element and appends/prepends it to a given target
    */
    clone: function clone(el, targetDest, classToApply, positionFlag) {
        var clonedNode = el.cloneNode(true);
        clonedNode.classList.add(classToApply);

        // Generate mobile IDs, so we don't have duplicates
        headerManager.generateIds(clonedNode);

        if (positionFlag === 'append') {
            targetDest.appendChild(clonedNode);
        } else {
            targetDest.insertBefore(clonedNode, targetDest.firstChild);
        }
    },
    /**
    *   Utility function: Detaches an element and appends it to a given target
    */
    detachTo: function detachTo(el, targetDest) {
        return $(el).detach().appendTo(targetDest);
    },
    generateIds: function generateIds(elGroup) {
        var elsWithID = elGroup.querySelectorAll('[id]');
        if (elsWithID.length) {
            Array.from(elsWithID).forEach(function (el) {
                // Get el's original ID
                var originalID = el.getAttribute('id');
                // Generate a new ID
                var newID = b64EncodeUnicode(originalID);
                // Replace the old ID by the new one
                el.setAttribute('id', newID);
                // Look for a label that points to that same original ID
                var label = elGroup.querySelector('[for="' + originalID + '"]');
                if (label) {
                    //There's a label pointing to the old id. Lets replace it as well
                    label.setAttribute('for', newID);
                }
            });
        }
    }
};

(function () {
    var minMq = '(min-width: 85em)';
    window.matchMedia(minMq).addListener(function (mql) {
        if (!mql.matches) {
            //Ensure it only runs once
            if (!document.querySelector('body').classList.contains(headerManager.settings.classes.init)) {
                headerManager.init();
            }
        }
    });

    if (!window.matchMedia(minMq).matches) {
        headerManager.init();
    }
})();
var mobileMegaMenu = {
    settings: {
        megamenuClass: 'js-mega-menu-list',
        megamenuWrapperClass: 'sub-mega-nav',
        activeClass: 'navbar__item--active',
        currentParentClass: 'js-current-parent',
        clickTriggerClass: 'navbar__item-link',
        slideSpeed: 50,
        arrowHTMLString: '<i class="fa fa-angle-down desktop-hidden" aria-hidden="true" tabindex="0"></i>',
        arrowClassSelector: 'fa'
    },
    init: function init() {
        var _this = this;

        // Reset active classes
        _this.reset();

        // Add Arrows
        _this.addArrows();

        // Set click handlers
        _this.handleClicks();

        // Expand the current
        _this.expandCurrent();
    },
    handleClicks: function handleClicks() {
        var $arrows = $('.' + mobileMegaMenu.settings.clickTriggerClass + ' .' + mobileMegaMenu.settings.arrowClassSelector);

        $arrows.on('click.mobile', function (ev) {
            ev.preventDefault();
            var megamenu = ev.target.parentNode.nextElementSibling;
            if (!megamenu) {
                return;
            }

            var navbarItem = ev.target.parentNode.parentNode;
            var $megamenu = $(megamenu);

            if ($megamenu.is(':visible')) {
                $megamenu.slideUp(mobileMegaMenu.settings.slideSpeed, function () {
                    navbarItem.classList.remove(mobileMegaMenu.settings.activeClass);
                });
            } else {
                $megamenu.slideDown(mobileMegaMenu.settings.slideSpeed, function () {
                    navbarItem.classList.add(mobileMegaMenu.settings.activeClass);
                });
            }
        });
    },
    expandCurrent: function expandCurrent() {
        var current = document.querySelector('.' + mobileMegaMenu.settings.currentParentClass);
        if (current) {
            $(current).find('.' + mobileMegaMenu.settings.arrowClassSelector).trigger('click.mobile');
        }
    },
    addArrows: function addArrows() {
        Array.from(document.querySelectorAll('.' + mobileMegaMenu.settings.megamenuClass)).forEach(function (el) {
            var target = $(el).closest('.' + mobileMegaMenu.settings.megamenuWrapperClass).prev();
            if (!target.find('.' + mobileMegaMenu.settings.arrowClassSelector).length) {
                target.append(mobileMegaMenu.settings.arrowHTMLString);
            }
        });
    },
    destroy: function destroy() {
        var triggers = '.' + mobileMegaMenu.settings.clickTriggerClass;
        $(triggers).find('.' + mobileMegaMenu.settings.arrowClassSelector).off('click.mobile');
        Array.from(document.querySelectorAll('.' + mobileMegaMenu.settings.megamenuWrapperClass)).forEach(function (el) {
            el.setAttribute('style', '');
        });
    },
    reset: function reset() {
        var activeElement = document.querySelector('.' + mobileMegaMenu.settings.activeClass);
        if (activeElement) {
            activeElement.classList.remove(mobileMegaMenu.settings.activeClass);
        }
    }
};

(function () {
    window.onload = function () {
        var minMq = '(min-width: 85em)';
        window.matchMedia(minMq).addListener(function (mql) {
            if (!mql.matches) {
                mobileMegaMenu.init();
            } else {
                mobileMegaMenu.reset();
                mobileMegaMenu.destroy();
            }
        });

        if (!window.matchMedia(minMq).matches) {
            mobileMegaMenu.init();
        }

        $('body').on('click', '.navbar__toggle', function () {
            mobileMegaMenu.reset();
            mobileMegaMenu.destroy();
            mobileMegaMenu.init();
        });
    };
})();

/*global $*/
var sidebarMenu = {
    settings: {
        toggleMarkup: '<button type="button" class="fa fa-angle-right" aria-pressed="false"></button>',
        toggleClass: 'nav-sidebar__toggle',
        toggleModifierClass: '--level',
        lvlAttr: 'data-level',
        toggleTrigger: 'nav-sidebar__link',
        childrenList: 'list--plain',
        currentParent: '.nav-sidebar .js-current-parent'
    },
    init: function init() {
        var _this = sidebarMenu;
        _this.addToggles();
        _this.addLevels();
        _this.addID();
        _this.addAccordion();
        _this.hideLevels();
        _this.handleListeners();
        _this.expandCurrent();
    },
    addToggles: function addToggles() {
        var _this = sidebarMenu;
        var settings = _this.settings;
        Array.from(document.querySelectorAll('.' + settings.toggleTrigger)).forEach(function (trigger) {
            var sibling = trigger.nextElementSibling; // the children list
            // Does the current item have children?
            if (sibling && sibling.classList.contains(settings.childrenList)) {
                var lvl = trigger.getAttribute(settings.lvlAttr); // the current level
                // Add toggle button
                $(trigger).before(settings.toggleMarkup);
                // Add required classes to the toggle button
                trigger.previousElementSibling.classList.add('' + settings.toggleClass + settings.toggleModifierClass + lvl);
                // Set the inner html for the toggle button
                trigger.previousElementSibling.innerHTML = 'Level ' + lvl;
            }
        });
    },
    addLevels: function addLevels() {
        $('.nav-sidebar ul').each(function (index, el) {
            //ul
            var levels = $(el).parents('ul').length + 1;
            $(el).addClass('nav-sidebar__menu--level' + levels);
            if (index > 0) {
                $(el).addClass('js-nav-sidebar-menu');
            }

            //li
            var $li = $(el).children('li');
            $li.addClass('nav-sidebar__item--level' + levels);

            //butons
            $li.children('button').addClass('nav-sidebar__toggle--level' + levels);
            $li.children('button').addClass('js-nav-sidebar-toggle');
        });
    },
    hideLevels: function hideLevels() {
        if ($('.js-nav-sidebar-menu').attr('aria-expanded')) {
            $('.js-nav-sidebar-menu').css('display', 'none');
        }
    },
    addID: function addID() {
        $('.js-nav-sidebar-toggle').each(function (index, el) {
            $(el).attr('aria-controls', 'nav-sidebar__menu' + index);
        });
        $('.js-nav-sidebar-menu').each(function (index, el) {
            $(el).attr('id', 'nav-sidebar__menu' + index);
        });
    },
    addAccordion: function addAccordion() {
        $('.nav-sidebar').UberAccordion({ // eslint-disable-line new-cap
            buttonClass: 'js-nav-sidebar-toggle'
        });
    },
    handleListeners: function handleListeners() {
        $('.js-nav-sidebar-toggle').on('click', function (event) {
            var pressed = event.target.getAttribute('aria-pressed') === 'false';
            //change the aria-pressed value as the button is toggled:
            event.target.setAttribute('aria-pressed', pressed ? 'true' : 'false');
            var id = $(this).attr('aria-controls');
            if (pressed) {
                $('#' + id).css('display', 'block');
                $(this).removeClass('fa-angle-right');
                $(this).addClass('fa-angle-down');
            } else {
                $('#' + id).css('display', 'none');
                $(this).removeClass('fa-angle-down');
                $(this).addClass('fa-angle-right');
            }
        });
    },
    expandCurrent: function expandCurrent() {
        var parentsArr = Array.from(document.querySelectorAll(sidebarMenu.settings.currentParent));
        var event = document.createEvent('HTMLEvents');
        event.initEvent('click', true, false);
        parentsArr.forEach(function (el) {
            var toggler = el.previousElementSibling;
            if (toggler) {
                toggler.dispatchEvent(event);
            }
        });
    }
};

(function () {
    'use strict';

    sidebarMenu.init();
})();

var navLinks = {
    settings: {
        link: 'nav-site-section__link',
        trigger: 'js-nav-link-ctrl',
        active: 'nav-site-section__link--active'
    },
    init: function init() {
        var links = Array.from(document.querySelectorAll('.' + navLinks.settings.trigger));
        navLinks.handleActiveStates(links);
    },
    handleActiveStates: function handleActiveStates(arrEls) {
        arrEls.forEach(function (el) {
            el.addEventListener('click', function (ev) {
                var linkEl = ev.target;
                var siblings = navLinks.getSiblings(linkEl.parentNode.parentNode, navLinks.settings.link, el);
                //Toggle active class
                linkEl.classList.toggle(navLinks.settings.active);
                //Remove active class from the siblings
                siblings.forEach(function (sib) {
                    sib.querySelector('.' + navLinks.settings.link).classList.remove(navLinks.settings.active);
                });
            });
        });
    },
    getSiblings: function getSiblings(parent, targetClass, current) {
        return Array.prototype.filter.call(parent.children, function (child) {
            return child.querySelector('.' + targetClass) !== current;
        });
    }
};

(function () {
    'use strict';

    navLinks.init();
})(jQuery);

var navUserMobileHandler = {
    settings: {
        toggles: ['js-nav-user__mobile-toggle', 'nav-user__close'],
        nav: 'nav-user',
        activeClasses: {
            wrapper: 'nav-user__slide-out--active',
            nav: 'nav-user--open'
        }
    },
    init: function init() {
        var _this = navUserMobileHandler;
        _this.settings.toggles.forEach(function (el) {
            _this.setEventHandlers(document.querySelector('.' + el));
        });
    },
    setEventHandlers: function setEventHandlers(triggerEl) {
        var _this = navUserMobileHandler;
        triggerEl.addEventListener('click', function (ev) {
            ev.preventDefault();
            var targetEl = document.querySelector(ev.currentTarget.getAttribute('data-target'));
            var slidingPanel = targetEl.querySelector('.' + _this.settings.nav);
            _this.toggleClass(targetEl, _this.settings.activeClasses.wrapper);
            _this.toggleClass(slidingPanel, _this.settings.activeClasses.nav);
        });
    },
    toggleClass: function toggleClass(el, className) {
        el.classList.toggle(className);
    }
};

(function () {
    //Init accordion over the condensed version of the nav-user
    $('.js-nav-user__acc-trigger').UberAccordion({ // eslint-disable-line new-cap
        buttonClass: 'nav-user__acc-toggle'
    });
    //Handle the mobile nav user
    navUserMobileHandler.init();
})();

var navSidebarFilterHandler = {
    settings: {
        filters: 'nav-search-filters__item-link',
        nav: 'nav-search-filters',
        spanClass: 'nav-search-filters__item-checkbox',
        spanTag: 'SPAN',
        activeClasses: {
            span: 'nav-search-filters__item-checkbox--active'
        }
    },
    init: function init() {
        var _this = navSidebarFilterHandler;
        var elems = document.querySelectorAll('.' + _this.settings.nav);
        if (elems.length > 0) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {

                for (var _iterator = elems[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var el = _step.value;

                    _this.setEventHandlers(el);
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }
    },

    setEventHandlers: function setEventHandlers(actualEl) {
        var _this = navSidebarFilterHandler;

        actualEl.addEventListener('click', function (ev) {
            if (ev.target.className === _this.settings.filters) {

                var spanFilter = ev.target.querySelector('.' + _this.settings.spanClass);
                _this.toggleClass(spanFilter, _this.settings.activeClasses.span);
            } else if (ev.target.tagName === _this.settings.spanTag) {

                var _spanFilter = ev.target;
                _this.toggleClass(_spanFilter, _this.settings.activeClasses.span);
            }
        });
    },

    toggleClass: function toggleClass(el, className) {
        el.classList.toggle(className);
    }
};

var mobileNavSearchFilter = {
    settings: {
        openButton: 'nav-search-filters__trigger-btn',
        clearBtn: 'nav-search-filters__clear-btn',
        doneBtn: 'nav-search-filters__done-btn',
        navSlideID: 'nav-search-filters-slide',
        activCheckbox: 'nav-search-filters__item-checkbox--active',
        toggleClass: ['nav-search-filters__slide-out--active', 'nav-search-filters--open']
    },

    init: function init() {
        var _this = mobileNavSearchFilter;
        var toggBtn = document.querySelectorAll('.' + _this.settings.openButton);

        if (toggBtn.length > 0) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = toggBtn[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var btn = _step2.value;

                    _this.openCloseMenu(btn);
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }

            _this.clearMenu();
            _this.doneMenu();
        }
    },

    openCloseMenu: function openCloseMenu(element) {
        var _this = mobileNavSearchFilter;
        var nav = document.querySelector('#' + _this.settings.navSlideID);
        var filter = nav.querySelector('.nav-search-filters');

        element.addEventListener('click', function (ev) {
            ev.preventDefault();

            _this.toggleClass(nav, _this.settings.toggleClass[0]);
            _this.toggleClass(filter, _this.settings.toggleClass[1]);
        });
    },
    toggleClass: function toggleClass(el, className) {
        el.classList.toggle(className);
    },

    clearMenu: function clearMenu() {
        var _this = mobileNavSearchFilter;
        var clear = document.querySelector('.' + _this.settings.clearBtn);

        clear.addEventListener('click', function (ev) {
            ev.preventDefault();
            var active = document.querySelectorAll('.' + _this.settings.activCheckbox);

            var _iteratorNormalCompletion3 = true;
            var _didIteratorError3 = false;
            var _iteratorError3 = undefined;

            try {
                for (var _iterator3 = active[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
                    var el = _step3.value;

                    el.classList.remove(_this.settings.activCheckbox);
                }
            } catch (err) {
                _didIteratorError3 = true;
                _iteratorError3 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion3 && _iterator3.return) {
                        _iterator3.return();
                    }
                } finally {
                    if (_didIteratorError3) {
                        throw _iteratorError3;
                    }
                }
            }
        });
    },

    doneMenu: function doneMenu() {
        var _this = mobileNavSearchFilter;
        var done = document.querySelector('.' + _this.settings.doneBtn);

        _this.openCloseMenu(done);
    }
};

(function () {
    'use strict';

    navSidebarFilterHandler.init();
    mobileNavSearchFilter.init();

    //Date filters handler
    var dateFilters = Array.from(document.querySelectorAll('.js-date-filter-ctrl'));
    dateFilters.forEach(function (el) {
        el.addEventListener('click', function (ev) {
            ev.target.classList.toggle('filter--ascending');
        });
    });
})(jQuery);

(function ($) {
    'use strict';

    $('.content table').wrap('<div class="table-wrapper"></div>');
})(jQuery);
//# sourceMappingURL=global.min.js.map
