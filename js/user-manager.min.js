'use strict';

/*global Squiz_Matrix_API */

function getThumb(api, user) {
    return new Promise(function (resolve, reject) {
        // eslint-disable-line no-undef, no-unused-vars
        api.getChildren({
            'asset_id': user,
            'levels': 1,
            'type_codes': ['image'],
            'link_types': ['SQ_LINK_NOTICE'],
            'link_values': ['thumbnail'],
            'get_attributes': 1,
            'dataCallback': function dataCallback(obj) {
                resolve(obj);
            }
        });
    });
}

function deleteLink(api, parent, child, linktype, linkvalue) {
    return new Promise(function (resolve, reject) {
        // eslint-disable-line no-undef, no-unused-vars
        api.removeLink({
            'parent_id': parent,
            'child_id': child,
            'link_type': linktype,
            'link_value': linkvalue,
            'dataCallback': function dataCallback(obj) {
                return resolve(obj);
            }
        });
    });
}

function trashAsset(api, idsArr) {
    api.trashAsset({
        'asset_ids': idsArr,
        'dataCallback': function dataCallback(obj) {
            console.log(obj); // debug
        }
    });
}

function addThumb(api, parent, child) {
    return new Promise(function (resolve, reject) {
        // eslint-disable-line no-undef, no-unused-vars
        api.createLink({
            'parent_id': parent,
            'child_id': child,
            'link_type': 'SQ_LINK_NOTICE',
            'link_value': 'thumbnail',
            'sort_order': 1,
            'is_dependant': 0,
            'is_exclusive': 0,
            'dataCallback': function dataCallback(obj) {
                return resolve(obj);
            }
        });
    });
}

var userAvatar = {
    settings: {
        form: '#page_asset_builder_5679',
        createdImage: 'avatar-id',
        user: 'user-id',
        apiKey: '3187352393',
        thumbDOM: '.nav-user__thumb-img',
        postSubmitHelper: '#user-avatar-post-submit',
        redirectPage: 'redirect-to',
        wrapper: '.js-edit-profile-image',
        errorCtrl: '#create-user-avatar-errors',
        loadingstate: 'in-progress'
    },
    init: function init() {
        userAvatar.handleSubmission($(document.querySelector(userAvatar.settings.form)));
    },
    handleSubmission: function handleSubmission(form) {
        var options = {
            resetForm: true,
            success: function success(response, status, xhr) {
                // Check if the submission returned any errors
                if (!userAvatar.hasErrors(xhr.responseText)) {
                    (function () {
                        // No errors returned in the response
                        var responseDom = $(xhr.responseText);
                        var postSubmitHelper = responseDom.find(userAvatar.settings.postSubmitHelper);
                        var createdImageID = postSubmitHelper.data(userAvatar.settings.createdImage);
                        var userID = postSubmitHelper.data(userAvatar.settings.user);
                        var redirectPage = postSubmitHelper.data(userAvatar.settings.redirectPage);
                        var submissionPage = $('.js-avatar-submit').attr('data-trigger') + '?uid=' + userID + '&fid=4948&fval=' + createdImageID;

                        // Set user Avatar - non LDAP
                        // Start the Matrix API Operations
                        //userAvatar.initAPI(userID, createdImageID, redirectPage);

                        // Set user Avatar - LDAP
                        // Create xhr request to trigger page, then redirect
                        $.get(submissionPage).done(function () {
                            userAvatar.redirectTo(redirectPage);
                            $.get('https://intranetdev.latrobe.edu.au/clearusercache');
                        });
                    })();
                } else {
                    // There are errors
                    userAvatar.setLoading(false); // Change the state
                    userAvatar.showErrors(xhr.responseText); // Display the errors
                }
            },
            beforeSubmit: function beforeSubmit() {
                // Set in progress state. Hides the submit and cancel buttons
                userAvatar.setLoading();
                // Clear the errors
                userAvatar.clearErrors();
            }
        };
        // Submit the form
        form.ajaxForm(options);
    },
    initAPI: function initAPI(user, image, redirectPageURL) {
        var apiOptions = {};
        var jsApi = void 0;
        apiOptions['key'] = userAvatar.settings.apiKey; // eslint-disable-line dot-notation
        jsApi = new Squiz_Matrix_API(apiOptions); // eslint-disable-line camelcase

        // Get the current thumbnail applied to the user
        getThumb(jsApi, user).then(function (obj) {
            // Check wether the user already has a thumbnail applied or not
            if (Array.isArray(obj)) {
                // User has a thumbnail set. Let's remove it and then add the new one.
                var currentThumbID = obj[0].asset_id;
                // Remove the thumbnail link
                deleteLink(jsApi, user, currentThumbID, 'SQ_LINK_NOTICE', 'thumbnail').then(function (response) {
                    console.log(response); // debug
                    // Add the new thumbnail.
                    // Performed only after the old thumb removed to don't create conflicts
                    userAvatar.addThumbnail(jsApi, user, image).then(function () {
                        // Redirect to the page being previewed previously
                        userAvatar.redirectTo(redirectPageURL);
                    });
                });
                // Trash the old thumbnail. Executed assynchronously
                trashAsset(jsApi, [currentThumbID]);
            } else {
                // User doesn't have any thumbnail set. Lets add it.
                userAvatar.addThumbnail(jsApi, user, image).then(function () {
                    // Redirect to the page being previewed previously
                    userAvatar.redirectTo(redirectPageURL);
                });
            }
        });
    },
    addThumbnail: function addThumbnail(api, user, image) {
        return new Promise(function (resolve, reject) {
            // eslint-disable-line no-undef, no-unused-vars
            addThumb(api, user, image).then(function (resp) {
                console.log(resp); // debug
                resolve('Thumbnail added');
            });
        });
    },
    redirectTo: function redirectTo(url) {
        window.location.href = url;
    },
    setLoading: function setLoading() {
        var flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        var classlist = document.querySelector(userAvatar.settings.wrapper).classList;
        if (flag) {
            classlist.add(userAvatar.settings.loadingstate);
        } else {
            classlist.remove(userAvatar.settings.loadingstate);
        }
    },
    hasErrors: function hasErrors(response) {
        return $(response).find(userAvatar.settings.errorCtrl).length;
    },
    showErrors: function showErrors(response) {
        var errors = $(response).find(userAvatar.settings.errorCtrl);
        errors.appendTo(userAvatar.settings.wrapper);
        window.alert = function () {}; // Overwriting the alert so it doesn't show up when re-submitting
    },
    clearErrors: function clearErrors() {
        var errors = document.querySelector(userAvatar.settings.errorCtrl);
        if (errors) {
            errors.parentNode.removeChild(errors);
        }
    }
};

(function () {
    'use strict';

    if (document.querySelector(userAvatar.settings.form)) {
        userAvatar.init();
    }
})();

function getClassListString(classList) {
    return Array.from(classList).reduce(function (acc, el) {
        return acc + '.' + el;
    }, '');
}

function initNavCondensedAccordion() {
    //Init accordion over the condensed version of the nav-user
    var navCondActiveFlag = false;

    $('.js-nav-user__acc-trigger').UberAccordion({ // eslint-disable-line new-cap
        buttonClass: 'nav-user__acc-toggle',
        /**
            On select, lets build the logic that forces the nav condensed to close when a
            click happens anywhere outside of it.
        **/
        onSelect: function onSelect(button, target) {
            // flag to control if the nav condensed is active or not
            navCondActiveFlag = navCondActiveFlag ? false : true;
            if (navCondActiveFlag) {
                // nav condensed it's open. Lets add the listener for the clicks
                $('body').on('click.navcondensed', function (el) {
                    var targetClasses = getClassListString(el.target.classList); // classlist of the click target
                    var headerClasses = getClassListString(button[0].classList); // classlist of the nav header
                    var contentClasses = getClassListString(target[0].classList); // classlist of the nav contents
                    // check if the click target is a child of the nav header
                    var clickedNavHeaderFlag = targetClasses !== '' ? button[0].querySelector(targetClasses) : false;
                    // check if the click target is a child of the nav contents
                    var clickedNavContentsFlag = targetClasses !== '' ? target[0].querySelector(targetClasses) : false;
                    /**
                        if the click target is not a child of the nav header or nav contents AND it's not the
                        header/contents itself, trigger the click to force it (the nav) to close
                    **/
                    if (!(clickedNavHeaderFlag || clickedNavContentsFlag) && targetClasses !== headerClasses && targetClasses !== contentClasses) {
                        $(button).trigger('click');
                    }
                });
            } else {
                // remove the listener for the clicks. The nav has just closed.
                $('body').off('click.navcondensed');
            }
        }
    });
}

var navUserMobileHandler = {
    settings: {
        toggles: ['js-nav-user__mobile-toggle', 'nav-user__close'],
        nav: 'nav-user',
        activeClasses: {
            wrapper: 'nav-user__slide-out--active',
            nav: 'nav-user--open'
        }
    },
    init: function init() {
        var _this = navUserMobileHandler;
        _this.settings.toggles.forEach(function (el) {
            _this.setEventHandlers(document.querySelector('.' + el));
        });
    },
    setEventHandlers: function setEventHandlers(triggerEl) {
        var _this = navUserMobileHandler;
        if (triggerEl) {
            triggerEl.addEventListener('click', function (ev) {
                ev.preventDefault();
                var targetEl = document.querySelector(ev.currentTarget.getAttribute('data-target'));
                var slidingPanel = targetEl.querySelector('.' + _this.settings.nav);

                _this.toggleClass(targetEl, _this.settings.activeClasses.wrapper);
                _this.toggleClass(slidingPanel, _this.settings.activeClasses.nav);
            });
        }
    },
    toggleClass: function toggleClass(el, className) {
        el.classList.toggle(className);
    }
};

var navUserHandler = {
    settings: {
        el: '',
        dataURL: '',
        currentPage: '',
        mobiletoggle: false
    },
    init: function init(el, resolve) {
        navUserHandler.settings.el = el;
        navUserHandler.settings.dataURL = el.getAttribute('data-userdata-url');
        navUserHandler.settings.currentPage = el.getAttribute('data-current-page');
        navUserHandler.settings.mobiletoggle = el.classList.contains('js-nav-user--mobile-toggle') ? true : false; //eslint-disable-line

        // Enable loading state spinner
        navUserHandler.toggleLoadingState(el);

        // Fetch nav user
        $.ajax({
            url: navUserHandler.settings.dataURL,
            type: 'get',
            data: {
                condensedflag: navUserHandler.settings.el.classList.contains('nav-user--condensed') ? true : false,
                mobiletoggle: navUserHandler.settings.mobiletoggle,
                currentpage: navUserHandler.settings.currentPage //eslint-disable-line
            },
            success: function success(response) {
                navUserHandler.print(response, resolve);
            }
        });
    },
    toggleLoadingState: function toggleLoadingState(el) {
        var classList = el.classList;
        if (classList.contains('nav-user--condensed')) {
            // classList.toggle('nav-user--condensed-loading');
        } else if (classList.contains('nav-user')) {
            classList.toggle('nav-user--loading');
        }
    },
    print: function print(data, resolve) {
        var parsedData = JSON.parse(data);
        var mobileSlideoutPlaceholder = document.getElementById('nav-user-slide').querySelector('.nav-user');

        if (parsedData.length > 1) {
            // Nav user condensed case
            mobileSlideoutPlaceholder.innerHTML = mobileSlideoutPlaceholder.innerHTML + parsedData[0];
            navUserHandler.settings.el.innerHTML = parsedData[1];
        } else {
            // Homepage or mobile toggle
            if (!navUserHandler.settings.mobiletoggle) {
                // Homepage
                mobileSlideoutPlaceholder.innerHTML = mobileSlideoutPlaceholder.innerHTML + parsedData[0];
                navUserHandler.settings.el.innerHTML = parsedData[0];
            } else {
                // Mobile toggle
                navUserHandler.settings.el.innerHTML = parsedData[0];
            }
        }

        // disable loading state spinner
        navUserHandler.toggleLoadingState(navUserHandler.settings.el);

        // resolve the promise
        resolve(null);
    }
};

(function () {
    var dealWithNavUser = new Promise(function (resolve, reject) {
        //eslint-disable-line
        navUserHandler.init(document.querySelector('.js-nav-user'), resolve);
    }).then(function () {
        var dealWithMobileToggle = new Promise(function (resolve, reject) {
            //eslint-disable-line
            navUserHandler.init(document.querySelector('.js-nav-user--mobile-toggle'), resolve);
        }).then(function () {
            document.querySelector('body').classList.add('nav-user-loaded');
            // Init nav user condensed accordion
            initNavCondensedAccordion();

            //Handle the mobile nav user
            navUserMobileHandler.init();
        });
    });
})(jQuery);
//# sourceMappingURL=user-manager.min.js.map
