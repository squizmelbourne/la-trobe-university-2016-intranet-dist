'use strict';

/*global Squiz_Matrix_API */

function getThumb(api, user) {
    return new Promise(function (resolve, reject) {
        // eslint-disable-line no-undef, no-unused-vars
        api.getChildren({
            'asset_id': user,
            'levels': 1,
            'type_codes': ['image'],
            'link_types': ['SQ_LINK_NOTICE'],
            'link_values': ['thumbnail'],
            'get_attributes': 1,
            'dataCallback': function dataCallback(obj) {
                resolve(obj);
            }
        });
    });
}

function deleteLink(api, parent, child, linktype, linkvalue) {
    return new Promise(function (resolve, reject) {
        // eslint-disable-line no-undef, no-unused-vars
        api.removeLink({
            'parent_id': parent,
            'child_id': child,
            'link_type': linktype,
            'link_value': linkvalue,
            'dataCallback': function dataCallback(obj) {
                return resolve(obj);
            }
        });
    });
}

function trashAsset(api, idsArr) {
    api.trashAsset({
        'asset_ids': idsArr,
        'dataCallback': function dataCallback(obj) {
            console.log(obj); // debug
        }
    });
}

function addThumb(api, parent, child) {
    return new Promise(function (resolve, reject) {
        // eslint-disable-line no-undef, no-unused-vars
        api.createLink({
            'parent_id': parent,
            'child_id': child,
            'link_type': 'SQ_LINK_NOTICE',
            'link_value': 'thumbnail',
            'sort_order': 1,
            'is_dependant': 0,
            'is_exclusive': 0,
            'dataCallback': function dataCallback(obj) {
                return resolve(obj);
            }
        });
    });
}

var userAvatar = {
    settings: {
        form: '#page_asset_builder_5679',
        createdImage: 'avatar-id',
        user: 'user-id',
        apiKey: '3187352393',
        thumbDOM: '.nav-user__thumb-img',
        postSubmitHelper: '#user-avatar-post-submit',
        redirectPage: 'redirect-to',
        wrapper: '.js-edit-profile-image',
        errorCtrl: '#create-user-avatar-errors',
        loadingstate: 'in-progress'
    },
    init: function init() {
        userAvatar.handleSubmission($(document.querySelector(userAvatar.settings.form)));
    },
    handleSubmission: function handleSubmission(form) {
        var options = {
            resetForm: true,
            success: function success(response, status, xhr) {
                // Check if the submission returned any errors
                if (!userAvatar.hasErrors(xhr.responseText)) {
                    // No errors returned in the response
                    var responseDom = $(xhr.responseText);
                    var postSubmitHelper = responseDom.find(userAvatar.settings.postSubmitHelper);
                    var createdImageID = postSubmitHelper.data(userAvatar.settings.createdImage);
                    var userID = postSubmitHelper.data(userAvatar.settings.user);
                    var redirectPage = postSubmitHelper.data(userAvatar.settings.redirectPage);

                    // Start the Matrix API Operations
                    userAvatar.initAPI(userID, createdImageID, redirectPage);
                } else {
                    // There are errors
                    userAvatar.setLoading(false); // Change the state
                    userAvatar.showErrors(xhr.responseText); // Display the errors
                }
            },
            beforeSubmit: function beforeSubmit() {
                // Set in progress state. Hides the submit and cancel buttons
                userAvatar.setLoading();
                // Clear the errors
                userAvatar.clearErrors();
            }
        };
        // Submit the form
        form.ajaxForm(options);
    },
    initAPI: function initAPI(user, image, redirectPageURL) {
        var apiOptions = {};
        var jsApi = void 0;
        apiOptions['key'] = userAvatar.settings.apiKey; // eslint-disable-line dot-notation
        jsApi = new Squiz_Matrix_API(apiOptions); // eslint-disable-line camelcase

        // Get the current thumbnail applied to the user
        getThumb(jsApi, user).then(function (obj) {
            // Check wether the user already has a thumbnail applied or not
            if (Array.isArray(obj)) {
                // User has a thumbnail set. Let's remove it and then add the new one.
                var currentThumbID = obj[0].asset_id;
                // Remove the thumbnail link
                deleteLink(jsApi, user, currentThumbID, 'SQ_LINK_NOTICE', 'thumbnail').then(function (response) {
                    console.log(response); // debug
                    // Add the new thumbnail.
                    // Performed only after the old thumb removed to don't create conflicts
                    userAvatar.addThumbnail(jsApi, user, image).then(function () {
                        // Redirect to the page being previewed previously
                        userAvatar.redirectTo(redirectPageURL);

                        //Clear the localStorage
                        localStorage.removeItem('user');
                    });
                });
                // Trash the old thumbnail. Executed assynchronously
                trashAsset(jsApi, [currentThumbID]);
            } else {
                // User doesn't have any thumbnail set. Lets add it.
                userAvatar.addThumbnail(jsApi, user, image).then(function () {
                    // Redirect to the page being previewed previously
                    userAvatar.redirectTo(redirectPageURL);

                    //Clear the localStorage
                    localStorage.removeItem('user');
                });
            }
        });
    },
    addThumbnail: function addThumbnail(api, user, image) {
        return new Promise(function (resolve, reject) {
            // eslint-disable-line no-undef, no-unused-vars
            addThumb(api, user, image).then(function (resp) {
                console.log(resp); // debug
                resolve('Thumbnail added');
            });
        });
    },
    redirectTo: function redirectTo(url) {
        window.location.href = url;
    },
    setLoading: function setLoading() {
        var flag = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;

        var classlist = document.querySelector(userAvatar.settings.wrapper).classList;
        if (flag) {
            classlist.add(userAvatar.settings.loadingstate);
        } else {
            classlist.remove(userAvatar.settings.loadingstate);
        }
    },
    hasErrors: function hasErrors(response) {
        return $(response).find(userAvatar.settings.errorCtrl).length;
    },
    showErrors: function showErrors(response) {
        var errors = $(response).find(userAvatar.settings.errorCtrl);
        errors.appendTo(userAvatar.settings.wrapper);
        window.alert = function () {}; // Overwriting the alert so it doesn't show up when re-submitting
    },
    clearErrors: function clearErrors() {
        var errors = document.querySelector(userAvatar.settings.errorCtrl);
        if (errors) {
            errors.parentNode.removeChild(errors);
        }
    }
};

(function () {
    'use strict';

    if (document.querySelector(userAvatar.settings.form)) {
        userAvatar.init();
    }
})();
//# sourceMappingURL=user-avatar.min.js.map
